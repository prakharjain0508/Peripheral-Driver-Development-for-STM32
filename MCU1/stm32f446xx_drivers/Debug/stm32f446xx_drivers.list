
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002aa8  08002aa8  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002aa8  08002aa8  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002aa8  08002aa8  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002aa8  08002aa8  00012aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000094  08002b44  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  08002b44  00020594  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fb9  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000636  00000000  00000000  00022077  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a8  00000000  00000000  000226b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00022858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ef3  00000000  00000000  000229b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b8d  00000000  00000000  000258ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b796  00000000  00000000  00027438  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00032bce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010bc  00000000  00000000  00032c4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800295c 	.word	0x0800295c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	0800295c 	.word	0x0800295c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <USART4_Init>:
uint8_t g_data = 0;

extern void initialise_monitor_handles();

void USART4_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	usart4_handle.pUSARTx = UART4;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <USART4_Init+0x3c>)
 80002c6:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <USART4_Init+0x40>)
 80002c8:	601a      	str	r2, [r3, #0]
	usart4_handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <USART4_Init+0x3c>)
 80002cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80002d0:	609a      	str	r2, [r3, #8]
	usart4_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <USART4_Init+0x3c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	73da      	strb	r2, [r3, #15]
	usart4_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80002d8:	4b08      	ldr	r3, [pc, #32]	; (80002fc <USART4_Init+0x3c>)
 80002da:	2202      	movs	r2, #2
 80002dc:	711a      	strb	r2, [r3, #4]
	usart4_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80002de:	4b07      	ldr	r3, [pc, #28]	; (80002fc <USART4_Init+0x3c>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	731a      	strb	r2, [r3, #12]
	usart4_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <USART4_Init+0x3c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	735a      	strb	r2, [r3, #13]
	usart4_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002ea:	4b04      	ldr	r3, [pc, #16]	; (80002fc <USART4_Init+0x3c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart4_handle);
 80002f0:	4802      	ldr	r0, [pc, #8]	; (80002fc <USART4_Init+0x3c>)
 80002f2:	f000 fd29 	bl	8000d48 <USART_Init>
}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	2000016c 	.word	0x2000016c
 8000300:	40004c00 	.word	0x40004c00

08000304 <USART4_GPIOInit>:

void USART4_GPIOInit(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <USART4_GPIOInit+0x40>)
 800030c:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800030e:	2302      	movs	r3, #2
 8000310:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000312:	2300      	movs	r3, #0
 8000314:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000316:	2301      	movs	r3, #1
 8000318:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800031a:	2302      	movs	r3, #2
 800031c:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 8;
 800031e:	2308      	movs	r3, #8
 8000320:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_N0_0;
 8000322:	2300      	movs	r3, #0
 8000324:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4618      	mov	r0, r3
 800032a:	f000 f9cf 	bl	80006cc <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_N0_1;
 800032e:	2301      	movs	r3, #1
 8000330:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 f9c9 	bl	80006cc <GPIO_Init>

}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40020000 	.word	0x40020000

08000348 <delay>:

	GPIO_Init(&GpioButton);
}

void delay(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 800034e:	2300      	movs	r3, #0
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	e002      	b.n	800035a <delay+0x12>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	3301      	adds	r3, #1
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a03      	ldr	r2, [pc, #12]	; (800036c <delay+0x24>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d9f8      	bls.n	8000354 <delay+0xc>
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr
 800036c:	0003d08f 	.word	0x0003d08f

08000370 <main>:

int main(void)
{
 8000370:	b590      	push	{r4, r7, lr}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]


	initialise_monitor_handles();
 800037a:	f002 fa6f 	bl	800285c <initialise_monitor_handles>

	USART4_GPIOInit();
 800037e:	f7ff ffc1 	bl	8000304 <USART4_GPIOInit>

    USART4_Init();
 8000382:	f7ff ff9d 	bl	80002c0 <USART4_Init>

    USART_IRQInterruptConfig(IRQ_NO_UART4,  ENABLE);
 8000386:	2101      	movs	r1, #1
 8000388:	2034      	movs	r0, #52	; 0x34
 800038a:	f000 fe41 	bl	8001010 <USART_IRQInterruptConfig>

    USART_PeripheralControl(UART4, ENABLE);
 800038e:	2101      	movs	r1, #1
 8000390:	4832      	ldr	r0, [pc, #200]	; (800045c <main+0xec>)
 8000392:	f000 fcbe 	bl	8000d12 <USART_PeripheralControl>

    printf("Application is running\n");
 8000396:	4832      	ldr	r0, [pc, #200]	; (8000460 <main+0xf0>)
 8000398:	f001 f93c 	bl	8001614 <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_N0_13) );
 800039c:	bf00      	nop
 800039e:	210d      	movs	r1, #13
 80003a0:	4830      	ldr	r0, [pc, #192]	; (8000464 <main+0xf4>)
 80003a2:	f000 fb31 	bl	8000a08 <GPIO_ReadFromInputPin>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d1f8      	bne.n	800039e <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 80003ac:	f7ff ffcc 	bl	8000348 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <main+0xf8>)
 80003b4:	fba3 1302 	umull	r1, r3, r3, r2
 80003b8:	0859      	lsrs	r1, r3, #1
 80003ba:	460b      	mov	r3, r1
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	440b      	add	r3, r1
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart4_handle, rx_buf, strlen(msg[cnt])) != USART_READY );
 80003c4:	bf00      	nop
 80003c6:	4a29      	ldr	r2, [pc, #164]	; (800046c <main+0xfc>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ff1e 	bl	8000210 <strlen>
 80003d4:	4603      	mov	r3, r0
 80003d6:	461a      	mov	r2, r3
 80003d8:	4925      	ldr	r1, [pc, #148]	; (8000470 <main+0x100>)
 80003da:	4826      	ldr	r0, [pc, #152]	; (8000474 <main+0x104>)
 80003dc:	f000 fd80 	bl	8000ee0 <USART_ReceiveDataIT>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d1ef      	bne.n	80003c6 <main+0x56>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart4_handle, (uint8_t*)msg[cnt], strlen(msg[cnt]));
 80003e6:	4a21      	ldr	r2, [pc, #132]	; (800046c <main+0xfc>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80003ee:	4a1f      	ldr	r2, [pc, #124]	; (800046c <main+0xfc>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff0a 	bl	8000210 <strlen>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461a      	mov	r2, r3
 8000400:	4621      	mov	r1, r4
 8000402:	481c      	ldr	r0, [pc, #112]	; (8000474 <main+0x104>)
 8000404:	f000 fd1f 	bl	8000e46 <USART_SendData>

    	printf("Transmitted : %s\n", msg[cnt]);
 8000408:	4a18      	ldr	r2, [pc, #96]	; (800046c <main+0xfc>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000410:	4619      	mov	r1, r3
 8000412:	4819      	ldr	r0, [pc, #100]	; (8000478 <main+0x108>)
 8000414:	f001 f88a 	bl	800152c <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	printf("Status: %d\n", status);
 8000418:	4b18      	ldr	r3, [pc, #96]	; (800047c <main+0x10c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4619      	mov	r1, r3
 800041e:	4818      	ldr	r0, [pc, #96]	; (8000480 <main+0x110>)
 8000420:	f001 f884 	bl	800152c <iprintf>
    	while(rxCmplt != SET);
 8000424:	bf00      	nop
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <main+0x114>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d1fb      	bne.n	8000426 <main+0xb6>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 800042e:	4a0f      	ldr	r2, [pc, #60]	; (800046c <main+0xfc>)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff feea 	bl	8000210 <strlen>
 800043c:	4603      	mov	r3, r0
 800043e:	3301      	adds	r3, #1
 8000440:	4a0b      	ldr	r2, [pc, #44]	; (8000470 <main+0x100>)
 8000442:	2100      	movs	r1, #0
 8000444:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received : %s\n",rx_buf);
 8000446:	490a      	ldr	r1, [pc, #40]	; (8000470 <main+0x100>)
 8000448:	480f      	ldr	r0, [pc, #60]	; (8000488 <main+0x118>)
 800044a:	f001 f86f 	bl	800152c <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 800044e:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <main+0x114>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3301      	adds	r3, #1
 8000458:	607b      	str	r3, [r7, #4]
		while( GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_N0_13) );
 800045a:	e79f      	b.n	800039c <main+0x2c>
 800045c:	40004c00 	.word	0x40004c00
 8000460:	080029ac 	.word	0x080029ac
 8000464:	40020800 	.word	0x40020800
 8000468:	aaaaaaab 	.word	0xaaaaaaab
 800046c:	20000000 	.word	0x20000000
 8000470:	20000190 	.word	0x20000190
 8000474:	2000016c 	.word	0x2000016c
 8000478:	080029c4 	.word	0x080029c4
 800047c:	2000000c 	.word	0x2000000c
 8000480:	080029d8 	.word	0x080029d8
 8000484:	200000b0 	.word	0x200000b0
 8000488:	080029e4 	.word	0x080029e4

0800048c <UART4_IRQHandler>:
	return 0;
}


void UART4_IRQHandler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	status = 4;
 8000490:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <UART4_IRQHandler+0x14>)
 8000492:	2204      	movs	r2, #4
 8000494:	701a      	strb	r2, [r3, #0]
	USART_IRQHandling(&usart4_handle);
 8000496:	4803      	ldr	r0, [pc, #12]	; (80004a4 <UART4_IRQHandler+0x18>)
 8000498:	f000 fe7a 	bl	8001190 <USART_IRQHandling>
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	2000000c 	.word	0x2000000c
 80004a4:	2000016c 	.word	0x2000016c

080004a8 <USART_ApplicationEventCallback>:

void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle, uint8_t ApEv)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	460b      	mov	r3, r1
 80004b2:	70fb      	strb	r3, [r7, #3]
	status = 2;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <USART_ApplicationEventCallback+0x28>)
 80004b6:	2202      	movs	r2, #2
 80004b8:	701a      	strb	r2, [r3, #0]
   if(ApEv == USART_EVENT_RX_CMPLT)
 80004ba:	78fb      	ldrb	r3, [r7, #3]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d102      	bne.n	80004c6 <USART_ApplicationEventCallback+0x1e>
   {
			rxCmplt = SET;
 80004c0:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <USART_ApplicationEventCallback+0x2c>)
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]

   }else if (ApEv == USART_EVENT_TX_CMPLT)
   {
	   ;
   }
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	2000000c 	.word	0x2000000c
 80004d4:	200000b0 	.word	0x200000b0

080004d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004da:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e2:	490d      	ldr	r1, [pc, #52]	; (8000518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <LoopForever+0xe>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f8:	4c0a      	ldr	r4, [pc, #40]	; (8000524 <LoopForever+0x16>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000506:	f000 ffe5 	bl	80014d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050a:	f7ff ff31 	bl	8000370 <main>

0800050e <LoopForever>:

LoopForever:
    b LoopForever
 800050e:	e7fe      	b.n	800050e <LoopForever>
  ldr   r0, =_estack
 8000510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800051c:	08002ab0 	.word	0x08002ab0
  ldr r2, =_sbss
 8000520:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000524:	20000594 	.word	0x20000594

08000528 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC_IRQHandler>
	...

0800052c <GPIO_PeriClockControl>:
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d157      	bne.n	80005ee <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a59      	ldr	r2, [pc, #356]	; (80006a8 <GPIO_PeriClockControl+0x17c>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d106      	bne.n	8000554 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 8000546:	4b59      	ldr	r3, [pc, #356]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a58      	ldr	r2, [pc, #352]	; (80006ac <GPIO_PeriClockControl+0x180>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOG)
			GPIOG_PCLK_DI();
		else if (pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
	}
}
 8000552:	e0a3      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a56      	ldr	r2, [pc, #344]	; (80006b0 <GPIO_PeriClockControl+0x184>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d106      	bne.n	800056a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800055c:	4b53      	ldr	r3, [pc, #332]	; (80006ac <GPIO_PeriClockControl+0x180>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	4a52      	ldr	r2, [pc, #328]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000562:	f043 0302 	orr.w	r3, r3, #2
 8000566:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000568:	e098      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a51      	ldr	r2, [pc, #324]	; (80006b4 <GPIO_PeriClockControl+0x188>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d106      	bne.n	8000580 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000572:	4b4e      	ldr	r3, [pc, #312]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a4d      	ldr	r2, [pc, #308]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057e:	e08d      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a4d      	ldr	r2, [pc, #308]	; (80006b8 <GPIO_PeriClockControl+0x18c>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d106      	bne.n	8000596 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000588:	4b48      	ldr	r3, [pc, #288]	; (80006ac <GPIO_PeriClockControl+0x180>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a47      	ldr	r2, [pc, #284]	; (80006ac <GPIO_PeriClockControl+0x180>)
 800058e:	f043 0308 	orr.w	r3, r3, #8
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000594:	e082      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a48      	ldr	r2, [pc, #288]	; (80006bc <GPIO_PeriClockControl+0x190>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d106      	bne.n	80005ac <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800059e:	4b43      	ldr	r3, [pc, #268]	; (80006ac <GPIO_PeriClockControl+0x180>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a42      	ldr	r2, [pc, #264]	; (80006ac <GPIO_PeriClockControl+0x180>)
 80005a4:	f043 0310 	orr.w	r3, r3, #16
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005aa:	e077      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a44      	ldr	r2, [pc, #272]	; (80006c0 <GPIO_PeriClockControl+0x194>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d106      	bne.n	80005c2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80005b4:	4b3d      	ldr	r3, [pc, #244]	; (80006ac <GPIO_PeriClockControl+0x180>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a3c      	ldr	r2, [pc, #240]	; (80006ac <GPIO_PeriClockControl+0x180>)
 80005ba:	f043 0320 	orr.w	r3, r3, #32
 80005be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c0:	e06c      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a3f      	ldr	r2, [pc, #252]	; (80006c4 <GPIO_PeriClockControl+0x198>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d106      	bne.n	80005d8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80005ca:	4b38      	ldr	r3, [pc, #224]	; (80006ac <GPIO_PeriClockControl+0x180>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a37      	ldr	r2, [pc, #220]	; (80006ac <GPIO_PeriClockControl+0x180>)
 80005d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d6:	e061      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a3b      	ldr	r2, [pc, #236]	; (80006c8 <GPIO_PeriClockControl+0x19c>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d15d      	bne.n	800069c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80005e0:	4b32      	ldr	r3, [pc, #200]	; (80006ac <GPIO_PeriClockControl+0x180>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a31      	ldr	r2, [pc, #196]	; (80006ac <GPIO_PeriClockControl+0x180>)
 80005e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ec:	e056      	b.n	800069c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a2d      	ldr	r2, [pc, #180]	; (80006a8 <GPIO_PeriClockControl+0x17c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d106      	bne.n	8000604 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80005f6:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <GPIO_PeriClockControl+0x180>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a2c      	ldr	r2, [pc, #176]	; (80006ac <GPIO_PeriClockControl+0x180>)
 80005fc:	f023 0301 	bic.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000602:	e04b      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a2a      	ldr	r2, [pc, #168]	; (80006b0 <GPIO_PeriClockControl+0x184>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d106      	bne.n	800061a <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <GPIO_PeriClockControl+0x180>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a26      	ldr	r2, [pc, #152]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000612:	f023 0302 	bic.w	r3, r3, #2
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000618:	e040      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <GPIO_PeriClockControl+0x188>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d106      	bne.n	8000630 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 8000622:	4b22      	ldr	r3, [pc, #136]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a21      	ldr	r2, [pc, #132]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000628:	f023 0304 	bic.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062e:	e035      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a21      	ldr	r2, [pc, #132]	; (80006b8 <GPIO_PeriClockControl+0x18c>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d106      	bne.n	8000646 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <GPIO_PeriClockControl+0x180>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <GPIO_PeriClockControl+0x180>)
 800063e:	f023 0308 	bic.w	r3, r3, #8
 8000642:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000644:	e02a      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a1c      	ldr	r2, [pc, #112]	; (80006bc <GPIO_PeriClockControl+0x190>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d106      	bne.n	800065c <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a16      	ldr	r2, [pc, #88]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000654:	f023 0310 	bic.w	r3, r3, #16
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
}
 800065a:	e01f      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <GPIO_PeriClockControl+0x194>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d106      	bne.n	8000672 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4a10      	ldr	r2, [pc, #64]	; (80006ac <GPIO_PeriClockControl+0x180>)
 800066a:	f023 0320 	bic.w	r3, r3, #32
 800066e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000670:	e014      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <GPIO_PeriClockControl+0x198>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d106      	bne.n	8000688 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <GPIO_PeriClockControl+0x180>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a0b      	ldr	r2, [pc, #44]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000686:	e009      	b.n	800069c <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <GPIO_PeriClockControl+0x19c>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d105      	bne.n	800069c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	4a05      	ldr	r2, [pc, #20]	; (80006ac <GPIO_PeriClockControl+0x180>)
 8000696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800069a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40020000 	.word	0x40020000
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020400 	.word	0x40020400
 80006b4:	40020800 	.word	0x40020800
 80006b8:	40020c00 	.word	0x40020c00
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40021400 	.word	0x40021400
 80006c4:	40021800 	.word	0x40021800
 80006c8:	40021c00 	.word	0x40021c00

080006cc <GPIO_Init>:
 * @return            - none
 *
 * @Note              - none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;		//temp register
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2101      	movs	r1, #1
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff24 	bl	800052c <GPIO_PeriClockControl>

	//1. configure the mode of the gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	795b      	ldrb	r3, [r3, #5]
 80006e8:	2b03      	cmp	r3, #3
 80006ea:	d81f      	bhi.n	800072c <GPIO_Init+0x60>
	{
		//non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	795b      	ldrb	r3, [r3, #5]
 80006f0:	461a      	mov	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	4619      	mov	r1, r3
 800070a:	2303      	movs	r3, #3
 800070c:	408b      	lsls	r3, r1
 800070e:	43db      	mvns	r3, r3
 8000710:	4619      	mov	r1, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	400a      	ands	r2, r1
 8000718:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;		//setting
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6819      	ldr	r1, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	430a      	orrs	r2, r1
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	e0c9      	b.n	80008c0 <GPIO_Init+0x1f4>

	}else
	{
		//this part will code later. (interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	795b      	ldrb	r3, [r3, #5]
 8000730:	2b04      	cmp	r3, #4
 8000732:	d117      	bne.n	8000764 <GPIO_Init+0x98>
		{
			//1. Configure the Falling Trigger Selection Register(FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000734:	4b47      	ldr	r3, [pc, #284]	; (8000854 <GPIO_Init+0x188>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	7912      	ldrb	r2, [r2, #4]
 800073c:	4611      	mov	r1, r2
 800073e:	2201      	movs	r2, #1
 8000740:	408a      	lsls	r2, r1
 8000742:	4611      	mov	r1, r2
 8000744:	4a43      	ldr	r2, [pc, #268]	; (8000854 <GPIO_Init+0x188>)
 8000746:	430b      	orrs	r3, r1
 8000748:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <GPIO_Init+0x188>)
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	687a      	ldr	r2, [r7, #4]
 8000750:	7912      	ldrb	r2, [r2, #4]
 8000752:	4611      	mov	r1, r2
 8000754:	2201      	movs	r2, #1
 8000756:	408a      	lsls	r2, r1
 8000758:	43d2      	mvns	r2, r2
 800075a:	4611      	mov	r1, r2
 800075c:	4a3d      	ldr	r2, [pc, #244]	; (8000854 <GPIO_Init+0x188>)
 800075e:	400b      	ands	r3, r1
 8000760:	6093      	str	r3, [r2, #8]
 8000762:	e035      	b.n	80007d0 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	795b      	ldrb	r3, [r3, #5]
 8000768:	2b05      	cmp	r3, #5
 800076a:	d117      	bne.n	800079c <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800076c:	4b39      	ldr	r3, [pc, #228]	; (8000854 <GPIO_Init+0x188>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	7912      	ldrb	r2, [r2, #4]
 8000774:	4611      	mov	r1, r2
 8000776:	2201      	movs	r2, #1
 8000778:	408a      	lsls	r2, r1
 800077a:	4611      	mov	r1, r2
 800077c:	4a35      	ldr	r2, [pc, #212]	; (8000854 <GPIO_Init+0x188>)
 800077e:	430b      	orrs	r3, r1
 8000780:	6093      	str	r3, [r2, #8]
			// clear the corresponding RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000782:	4b34      	ldr	r3, [pc, #208]	; (8000854 <GPIO_Init+0x188>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	7912      	ldrb	r2, [r2, #4]
 800078a:	4611      	mov	r1, r2
 800078c:	2201      	movs	r2, #1
 800078e:	408a      	lsls	r2, r1
 8000790:	43d2      	mvns	r2, r2
 8000792:	4611      	mov	r1, r2
 8000794:	4a2f      	ldr	r2, [pc, #188]	; (8000854 <GPIO_Init+0x188>)
 8000796:	400b      	ands	r3, r1
 8000798:	60d3      	str	r3, [r2, #12]
 800079a:	e019      	b.n	80007d0 <GPIO_Init+0x104>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	795b      	ldrb	r3, [r3, #5]
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	d115      	bne.n	80007d0 <GPIO_Init+0x104>
		{
			//1. Configure both FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <GPIO_Init+0x188>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	7912      	ldrb	r2, [r2, #4]
 80007ac:	4611      	mov	r1, r2
 80007ae:	2201      	movs	r2, #1
 80007b0:	408a      	lsls	r2, r1
 80007b2:	4611      	mov	r1, r2
 80007b4:	4a27      	ldr	r2, [pc, #156]	; (8000854 <GPIO_Init+0x188>)
 80007b6:	430b      	orrs	r3, r1
 80007b8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <GPIO_Init+0x188>)
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	7912      	ldrb	r2, [r2, #4]
 80007c2:	4611      	mov	r1, r2
 80007c4:	2201      	movs	r2, #1
 80007c6:	408a      	lsls	r2, r1
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a22      	ldr	r2, [pc, #136]	; (8000854 <GPIO_Init+0x188>)
 80007cc:	430b      	orrs	r3, r1
 80007ce:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	089b      	lsrs	r3, r3, #2
 80007d6:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <GPIO_Init+0x18c>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d045      	beq.n	8000878 <GPIO_Init+0x1ac>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a1a      	ldr	r2, [pc, #104]	; (800085c <GPIO_Init+0x190>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d02b      	beq.n	800084e <GPIO_Init+0x182>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a19      	ldr	r2, [pc, #100]	; (8000860 <GPIO_Init+0x194>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d024      	beq.n	800084a <GPIO_Init+0x17e>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a17      	ldr	r2, [pc, #92]	; (8000864 <GPIO_Init+0x198>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d01d      	beq.n	8000846 <GPIO_Init+0x17a>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a16      	ldr	r2, [pc, #88]	; (8000868 <GPIO_Init+0x19c>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d016      	beq.n	8000842 <GPIO_Init+0x176>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <GPIO_Init+0x1a0>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d00f      	beq.n	800083e <GPIO_Init+0x172>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a13      	ldr	r2, [pc, #76]	; (8000870 <GPIO_Init+0x1a4>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d008      	beq.n	800083a <GPIO_Init+0x16e>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a11      	ldr	r2, [pc, #68]	; (8000874 <GPIO_Init+0x1a8>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d101      	bne.n	8000836 <GPIO_Init+0x16a>
 8000832:	2307      	movs	r3, #7
 8000834:	e021      	b.n	800087a <GPIO_Init+0x1ae>
 8000836:	2300      	movs	r3, #0
 8000838:	e01f      	b.n	800087a <GPIO_Init+0x1ae>
 800083a:	2306      	movs	r3, #6
 800083c:	e01d      	b.n	800087a <GPIO_Init+0x1ae>
 800083e:	2305      	movs	r3, #5
 8000840:	e01b      	b.n	800087a <GPIO_Init+0x1ae>
 8000842:	2304      	movs	r3, #4
 8000844:	e019      	b.n	800087a <GPIO_Init+0x1ae>
 8000846:	2303      	movs	r3, #3
 8000848:	e017      	b.n	800087a <GPIO_Init+0x1ae>
 800084a:	2302      	movs	r3, #2
 800084c:	e015      	b.n	800087a <GPIO_Init+0x1ae>
 800084e:	2301      	movs	r3, #1
 8000850:	e013      	b.n	800087a <GPIO_Init+0x1ae>
 8000852:	bf00      	nop
 8000854:	40013c00 	.word	0x40013c00
 8000858:	40020000 	.word	0x40020000
 800085c:	40020400 	.word	0x40020400
 8000860:	40020800 	.word	0x40020800
 8000864:	40020c00 	.word	0x40020c00
 8000868:	40021000 	.word	0x40021000
 800086c:	40021400 	.word	0x40021400
 8000870:	40021800 	.word	0x40021800
 8000874:	40021c00 	.word	0x40021c00
 8000878:	2300      	movs	r3, #0
 800087a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800087c:	4b5f      	ldr	r3, [pc, #380]	; (80009fc <GPIO_Init+0x330>)
 800087e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000880:	4a5e      	ldr	r2, [pc, #376]	; (80009fc <GPIO_Init+0x330>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000886:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portcode << (temp2 * 4));
 8000888:	4a5d      	ldr	r2, [pc, #372]	; (8000a00 <GPIO_Init+0x334>)
 800088a:	7cfb      	ldrb	r3, [r7, #19]
 800088c:	3302      	adds	r3, #2
 800088e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000892:	7c79      	ldrb	r1, [r7, #17]
 8000894:	7cbb      	ldrb	r3, [r7, #18]
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	fa01 f303 	lsl.w	r3, r1, r3
 800089c:	4618      	mov	r0, r3
 800089e:	4958      	ldr	r1, [pc, #352]	; (8000a00 <GPIO_Init+0x334>)
 80008a0:	7cfb      	ldrb	r3, [r7, #19]
 80008a2:	4302      	orrs	r2, r0
 80008a4:	3302      	adds	r3, #2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008aa:	4b56      	ldr	r3, [pc, #344]	; (8000a04 <GPIO_Init+0x338>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	7912      	ldrb	r2, [r2, #4]
 80008b2:	4611      	mov	r1, r2
 80008b4:	2201      	movs	r2, #1
 80008b6:	408a      	lsls	r2, r1
 80008b8:	4611      	mov	r1, r2
 80008ba:	4a52      	ldr	r2, [pc, #328]	; (8000a04 <GPIO_Init+0x338>)
 80008bc:	430b      	orrs	r3, r1
 80008be:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	799b      	ldrb	r3, [r3, #6]
 80008c8:	461a      	mov	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	791b      	ldrb	r3, [r3, #4]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	791b      	ldrb	r3, [r3, #4]
 80008e0:	4619      	mov	r1, r3
 80008e2:	2303      	movs	r3, #3
 80008e4:	408b      	lsls	r3, r1
 80008e6:	43db      	mvns	r3, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	400a      	ands	r2, r1
 80008f0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;		//setting
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6899      	ldr	r1, [r3, #8]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	430a      	orrs	r2, r1
 8000900:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	79db      	ldrb	r3, [r3, #7]
 800090a:	461a      	mov	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	791b      	ldrb	r3, [r3, #4]
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	791b      	ldrb	r3, [r3, #4]
 8000922:	4619      	mov	r1, r3
 8000924:	2303      	movs	r3, #3
 8000926:	408b      	lsls	r3, r1
 8000928:	43db      	mvns	r3, r3
 800092a:	4619      	mov	r1, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	400a      	ands	r2, r1
 8000932:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;			//setting
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	68d9      	ldr	r1, [r3, #12]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	697a      	ldr	r2, [r7, #20]
 8000940:	430a      	orrs	r2, r1
 8000942:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]

	//4. configure the optype

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	7a1b      	ldrb	r3, [r3, #8]
 800094c:	461a      	mov	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	791b      	ldrb	r3, [r3, #4]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		//clearing
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	791b      	ldrb	r3, [r3, #4]
 8000962:	4619      	mov	r1, r3
 8000964:	2301      	movs	r3, #1
 8000966:	408b      	lsls	r3, r1
 8000968:	43db      	mvns	r3, r3
 800096a:	4619      	mov	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	400a      	ands	r2, r1
 8000972:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;		//setting
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6859      	ldr	r1, [r3, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	430a      	orrs	r2, r1
 8000982:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]

	//5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	795b      	ldrb	r3, [r3, #5]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d131      	bne.n	80009f4 <GPIO_Init+0x328>
	{
		//configure the alt function register
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	791b      	ldrb	r3, [r3, #4]
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	f003 0307 	and.w	r3, r3, #7
 80009a0:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));		//clearing
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	7c3a      	ldrb	r2, [r7, #16]
 80009a8:	3208      	adds	r2, #8
 80009aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	220f      	movs	r2, #15
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	4618      	mov	r0, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	7c3a      	ldrb	r2, [r7, #16]
 80009c2:	4001      	ands	r1, r0
 80009c4:	3208      	adds	r2, #8
 80009c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=  (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	7c3a      	ldrb	r2, [r7, #16]
 80009d0:	3208      	adds	r2, #8
 80009d2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	7a5b      	ldrb	r3, [r3, #9]
 80009da:	461a      	mov	r2, r3
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	4618      	mov	r0, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	7c3a      	ldrb	r2, [r7, #16]
 80009ec:	4301      	orrs	r1, r0
 80009ee:	3208      	adds	r2, #8
 80009f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80009f4:	bf00      	nop
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40013800 	.word	0x40013800
 8000a04:	40013c00 	.word	0x40013c00

08000a08 <GPIO_ReadFromInputPin>:
 * @return            - 0 or 1
 *
 * @Note              - none
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	691a      	ldr	r2, [r3, #16]
 8000a18:	78fb      	ldrb	r3, [r7, #3]
 8000a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]

	return value;
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
	...

08000a34 <RCC_GetPCLK1Value>:
 * @return            - PCLK1 value
 *
 * @Note              - none
 */
uint32_t RCC_GetPCLK1Value(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000a3a:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <RCC_GetPCLK1Value+0x9c>)
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	089b      	lsrs	r3, r3, #2
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f003 0303 	and.w	r3, r3, #3
 8000a46:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000a48:	7a7b      	ldrb	r3, [r7, #9]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d102      	bne.n	8000a54 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000; 			//System clock is HSI
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <RCC_GetPCLK1Value+0xa0>)
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e00b      	b.n	8000a6c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000a54:	7a7b      	ldrb	r3, [r7, #9]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d102      	bne.n	8000a60 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;			//System clock is HSE
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <RCC_GetPCLK1Value+0xa4>)
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	e005      	b.n	8000a6c <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2)
 8000a60:	7a7b      	ldrb	r3, [r7, #9]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d102      	bne.n	8000a6c <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000a66:	f000 f895 	bl	8000b94 <RCC_GetPLLOutputClock>
 8000a6a:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <RCC_GetPCLK1Value+0x9c>)
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	091b      	lsrs	r3, r3, #4
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	f003 030f 	and.w	r3, r3, #15
 8000a78:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000a7a:	7a3b      	ldrb	r3, [r7, #8]
 8000a7c:	2b07      	cmp	r3, #7
 8000a7e:	d802      	bhi.n	8000a86 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	72fb      	strb	r3, [r7, #11]
 8000a84:	e005      	b.n	8000a92 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000a86:	7a3b      	ldrb	r3, [r7, #8]
 8000a88:	3b08      	subs	r3, #8
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <RCC_GetPCLK1Value+0xa8>)
 8000a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a90:	72fb      	strb	r3, [r7, #11]
	}

	//for apb1
	temp = ((RCC->CFGR >> 10) & 0x7);
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <RCC_GetPCLK1Value+0x9c>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	0a9b      	lsrs	r3, r3, #10
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000aa0:	7a3b      	ldrb	r3, [r7, #8]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d802      	bhi.n	8000aac <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	72bb      	strb	r3, [r7, #10]
 8000aaa:	e004      	b.n	8000ab6 <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000aac:	7a3b      	ldrb	r3, [r7, #8]
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <RCC_GetPCLK1Value+0xac>)
 8000ab2:	5cd3      	ldrb	r3, [r2, r3]
 8000ab4:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = (SystemClk / ahbp) / apb1p;
 8000ab6:	7afb      	ldrb	r3, [r7, #11]
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8000abe:	7abb      	ldrb	r3, [r7, #10]
 8000ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac4:	607b      	str	r3, [r7, #4]

	return pclk1;
 8000ac6:	687b      	ldr	r3, [r7, #4]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	00f42400 	.word	0x00f42400
 8000ad8:	007a1200 	.word	0x007a1200
 8000adc:	20000010 	.word	0x20000010
 8000ae0:	20000020 	.word	0x20000020

08000ae4 <RCC_GetPCLK2Value>:
 * @return            - PCLK2 value
 *
 * @Note              - none
 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
	uint32_t pclk2, temp, SystemClk = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]

	uint8_t clksrc, ahbp, apb2p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <RCC_GetPCLK2Value+0x9c>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f003 0303 	and.w	r3, r3, #3
 8000afa:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000afc:	7a7b      	ldrb	r3, [r7, #9]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d102      	bne.n	8000b08 <RCC_GetPCLK2Value+0x24>
	{
		SystemClk = 16000000; 			//System clock is HSI
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <RCC_GetPCLK2Value+0xa0>)
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	e00b      	b.n	8000b20 <RCC_GetPCLK2Value+0x3c>
	}else if(clksrc == 1)
 8000b08:	7a7b      	ldrb	r3, [r7, #9]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d102      	bne.n	8000b14 <RCC_GetPCLK2Value+0x30>
	{
		SystemClk = 8000000;			//System clock is HSE
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <RCC_GetPCLK2Value+0xa4>)
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	e005      	b.n	8000b20 <RCC_GetPCLK2Value+0x3c>
	}else if(clksrc == 2)
 8000b14:	7a7b      	ldrb	r3, [r7, #9]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d102      	bne.n	8000b20 <RCC_GetPCLK2Value+0x3c>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000b1a:	f000 f83b 	bl	8000b94 <RCC_GetPLLOutputClock>
 8000b1e:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <RCC_GetPCLK2Value+0x9c>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	091b      	lsrs	r3, r3, #4
 8000b26:	f003 030f 	and.w	r3, r3, #15
 8000b2a:	607b      	str	r3, [r7, #4]

	if(temp < 8)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b07      	cmp	r3, #7
 8000b30:	d802      	bhi.n	8000b38 <RCC_GetPCLK2Value+0x54>
	{
		ahbp = 1;
 8000b32:	2301      	movs	r3, #1
 8000b34:	72fb      	strb	r3, [r7, #11]
 8000b36:	e005      	b.n	8000b44 <RCC_GetPCLK2Value+0x60>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b08      	subs	r3, #8
 8000b3c:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <RCC_GetPCLK2Value+0xa8>)
 8000b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b42:	72fb      	strb	r3, [r7, #11]
	}

	//for apb2
	temp = ((RCC->CFGR >> 13) & 0x7);
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <RCC_GetPCLK2Value+0x9c>)
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	0b5b      	lsrs	r3, r3, #13
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	607b      	str	r3, [r7, #4]

	if(temp < 0x04)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d802      	bhi.n	8000b5c <RCC_GetPCLK2Value+0x78>
	{
		apb2p = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	72bb      	strb	r3, [r7, #10]
 8000b5a:	e004      	b.n	8000b66 <RCC_GetPCLK2Value+0x82>
	}else
	{
		apb2p = APB1_PreScaler[temp-4];
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <RCC_GetPCLK2Value+0xac>)
 8000b62:	5cd3      	ldrb	r3, [r2, r3]
 8000b64:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClk / ahbp) / apb2p;
 8000b66:	7afb      	ldrb	r3, [r7, #11]
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b6e:	7abb      	ldrb	r3, [r7, #10]
 8000b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b74:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000b76:	683b      	ldr	r3, [r7, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	00f42400 	.word	0x00f42400
 8000b88:	007a1200 	.word	0x007a1200
 8000b8c:	20000010 	.word	0x20000010
 8000b90:	20000020 	.word	0x20000020

08000b94 <RCC_GetPLLOutputClock>:
 * @return            - PLL clock value
 *
 * @Note              - none
 */
uint32_t RCC_GetPLLOutputClock()
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]

	//Function not implemented yet!!

	return temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
	...

08000bac <USART_PeriClockControl>:
 * @return            - none
 *
 * @Note              - none
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d141      	bne.n	8000c42 <USART_PeriClockControl+0x96>
	{
		if(pUSARTx == USART1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a43      	ldr	r2, [pc, #268]	; (8000cd0 <USART_PeriClockControl+0x124>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d106      	bne.n	8000bd4 <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 8000bc6:	4b43      	ldr	r3, [pc, #268]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a42      	ldr	r2, [pc, #264]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pUSARTx == UART5)
			UART5_PCLK_DI();
		else if (pUSARTx == USART6)
			USART6_PCLK_DI();
	}
}
 8000bd2:	e077      	b.n	8000cc4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a40      	ldr	r2, [pc, #256]	; (8000cd8 <USART_PeriClockControl+0x12c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d106      	bne.n	8000bea <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000bdc:	4b3d      	ldr	r3, [pc, #244]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a3c      	ldr	r2, [pc, #240]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000be8:	e06c      	b.n	8000cc4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a3b      	ldr	r2, [pc, #236]	; (8000cdc <USART_PeriClockControl+0x130>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d106      	bne.n	8000c00 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000bf2:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a37      	ldr	r2, [pc, #220]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bfe:	e061      	b.n	8000cc4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a37      	ldr	r2, [pc, #220]	; (8000ce0 <USART_PeriClockControl+0x134>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d106      	bne.n	8000c16 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000c08:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0c:	4a31      	ldr	r2, [pc, #196]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c12:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c14:	e056      	b.n	8000cc4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a32      	ldr	r2, [pc, #200]	; (8000ce4 <USART_PeriClockControl+0x138>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d106      	bne.n	8000c2c <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000c1e:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a2c      	ldr	r2, [pc, #176]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c2a:	e04b      	b.n	8000cc4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <USART_PeriClockControl+0x13c>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d147      	bne.n	8000cc4 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c38:	4a26      	ldr	r2, [pc, #152]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c3a:	f043 0320 	orr.w	r3, r3, #32
 8000c3e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c40:	e040      	b.n	8000cc4 <USART_PeriClockControl+0x118>
		if(pUSARTx == USART1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a22      	ldr	r2, [pc, #136]	; (8000cd0 <USART_PeriClockControl+0x124>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d106      	bne.n	8000c58 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4e:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c50:	f023 0310 	bic.w	r3, r3, #16
 8000c54:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c56:	e035      	b.n	8000cc4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <USART_PeriClockControl+0x12c>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d106      	bne.n	8000c6e <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c6c:	e02a      	b.n	8000cc4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <USART_PeriClockControl+0x130>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d106      	bne.n	8000c84 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c82:	e01f      	b.n	8000cc4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a16      	ldr	r2, [pc, #88]	; (8000ce0 <USART_PeriClockControl+0x134>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d106      	bne.n	8000c9a <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000c8c:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000c92:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000c96:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c98:	e014      	b.n	8000cc4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART5)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <USART_PeriClockControl+0x138>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d106      	bne.n	8000cb0 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000ca8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000cae:	e009      	b.n	8000cc4 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART6)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <USART_PeriClockControl+0x13c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d105      	bne.n	8000cc4 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbc:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <USART_PeriClockControl+0x128>)
 8000cbe:	f023 0320 	bic.w	r3, r3, #32
 8000cc2:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40004400 	.word	0x40004400
 8000cdc:	40004800 	.word	0x40004800
 8000ce0:	40004c00 	.word	0x40004c00
 8000ce4:	40005000 	.word	0x40005000
 8000ce8:	40011400 	.word	0x40011400

08000cec <USART_GetFlagStatus>:
 * @return            - 1 or 0
 *
 * @Note              - none
 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t FlagName)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e000      	b.n	8000d08 <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <USART_PeripheralControl>:
 * @return            - none
 *
 * @Note              - none
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000d1e:	78fb      	ldrb	r3, [r7, #3]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d106      	bne.n	8000d32 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000d30:	e005      	b.n	8000d3e <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60da      	str	r2, [r3, #12]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <USART_Init>:
 *
 * @Note              - None

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff26 	bl	8000bac <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	791b      	ldrb	r3, [r3, #4]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d104      	bne.n	8000d72 <USART_Init+0x2a>
	{
		//enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	e010      	b.n	8000d94 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	791b      	ldrb	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d104      	bne.n	8000d84 <USART_Init+0x3c>
	{
		//enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	e007      	b.n	8000d94 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	791b      	ldrb	r3, [r3, #4]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d103      	bne.n	8000d94 <USART_Init+0x4c>
	{
		//enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f043 030c 	orr.w	r3, r3, #12
 8000d92:	60fb      	str	r3, [r7, #12]
	}

    //configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7b5b      	ldrb	r3, [r3, #13]
 8000d98:	031b      	lsls	r3, r3, #12
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	7b9b      	ldrb	r3, [r3, #14]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d104      	bne.n	8000db4 <USART_Init+0x6c>
	{
		//enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	e00b      	b.n	8000dcc <USART_Init+0x84>

		//enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7b9b      	ldrb	r3, [r3, #14]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d107      	bne.n	8000dcc <USART_Init+0x84>
	{
		//enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	60fb      	str	r3, [r7, #12]

	    //enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dca:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]

	//configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7b1b      	ldrb	r3, [r3, #12]
 8000ddc:	031b      	lsls	r3, r3, #12
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7bdb      	ldrb	r3, [r3, #15]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d104      	bne.n	8000e04 <USART_Init+0xbc>
	{
		//enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	e010      	b.n	8000e26 <USART_Init+0xde>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7bdb      	ldrb	r3, [r3, #15]
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d104      	bne.n	8000e16 <USART_Init+0xce>
	{
		//enable RTS flow control
		tempreg |= (1 << USART_CR3_RTSE);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e007      	b.n	8000e26 <USART_Init+0xde>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7bdb      	ldrb	r3, [r3, #15]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d103      	bne.n	8000e26 <USART_Init+0xde>
	{
		//enable both CTS and RTS Flow control
		tempreg |= ( ( 1 << USART_CR3_CTSE) | ( 1 << USART_CR3_RTSE) );
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e24:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	//configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	4619      	mov	r1, r3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	f000 f877 	bl	8000f2c <USART_SetBaudRate>

}
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <USART_SendData>:
 * @return            - none
 *
 * @Note              - This is a blocking call or polling based API
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	60f8      	str	r0, [r7, #12]
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	e031      	b.n	8000ebc <USART_SendData+0x76>
	{
		//wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000e58:	bf00      	nop
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff43 	bl	8000cec <USART_GetFlagStatus>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f6      	beq.n	8000e5a <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	7b5b      	ldrb	r3, [r3, #13]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d118      	bne.n	8000ea6 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e86:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	7b9b      	ldrb	r3, [r3, #14]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d106      	bne.n	8000e9e <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//increment pTxBuffer twice
				pTxBuffer++;
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	3301      	adds	r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	e00b      	b.n	8000eb6 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	e007      	b.n	8000eb6 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]

			//increment the buffer address
			pTxBuffer++;
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3c9      	bcc.n	8000e58 <USART_SendData+0x12>
		}
	}

	//wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000ec4:	bf00      	nop
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff0d 	bl	8000cec <USART_GetFlagStatus>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f6      	beq.n	8000ec6 <USART_SendData+0x80>
}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <USART_ReceiveDataIT>:
 * @return            - state
 *
 * @Note              - This is a non-blocking call or an Interrupt based API
 */
uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ef2:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d011      	beq.n	8000f1e <USART_ReceiveDataIT+0x3e>
	{
		pUSARTHandle->RxLen = Len;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		//(void)pUSARTHandle->pUSARTx->DR;

		//enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0220 	orr.w	r2, r2, #32
 8000f1c:	60da      	str	r2, [r3, #12]

	}

	return rxstate;
 8000f1e:	7dfb      	ldrb	r3, [r7, #23]

}
 8000f20:	4618      	mov	r0, r3
 8000f22:	371c      	adds	r7, #28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
	...

08000f2c <USART_SetBaudRate>:
 *
 * @Note              - None
 *
 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part, F_part;

	uint32_t tempreg=0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a31      	ldr	r2, [pc, #196]	; (8001004 <USART_SetBaudRate+0xd8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d003      	beq.n	8000f4a <USART_SetBaudRate+0x1e>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a30      	ldr	r2, [pc, #192]	; (8001008 <USART_SetBaudRate+0xdc>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d103      	bne.n	8000f52 <USART_SetBaudRate+0x26>
	{
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000f4a:	f7ff fdcb 	bl	8000ae4 <RCC_GetPCLK2Value>
 8000f4e:	61f8      	str	r0, [r7, #28]
 8000f50:	e002      	b.n	8000f58 <USART_SetBaudRate+0x2c>
	}else
	{
	   PCLKx = RCC_GetPCLK1Value();
 8000f52:	f7ff fd6f 	bl	8000a34 <RCC_GetPCLK1Value>
 8000f56:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <USART_SetBaudRate+0x50>
	{
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009a      	lsls	r2, r3, #2
 8000f6e:	441a      	add	r2, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	e00a      	b.n	8000f92 <USART_SetBaudRate+0x66>
	}else
	{
	   //over sampling by 16
		usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000f7c:	69fa      	ldr	r2, [r7, #28]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	009a      	lsls	r2, r3, #2
 8000f86:	441a      	add	r2, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f90:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <USART_SetBaudRate+0xe0>)
 8000f96:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= (M_part << USART_BRR_DIV_Mantissa);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	2264      	movs	r2, #100	; 0x64
 8000fac:	fb02 f303 	mul.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00a      	beq.n	8000fd8 <USART_SetBaudRate+0xac>
	{
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100) & ((uint8_t)0x07);
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	3332      	adds	r3, #50	; 0x32
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <USART_SetBaudRate+0xe0>)
 8000fca:	fba2 2303 	umull	r2, r3, r2, r3
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	617b      	str	r3, [r7, #20]
 8000fd6:	e009      	b.n	8000fec <USART_SetBaudRate+0xc0>

	}else
	{
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	011b      	lsls	r3, r3, #4
 8000fdc:	3332      	adds	r3, #50	; 0x32
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <USART_SetBaudRate+0xe0>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	095b      	lsrs	r3, r3, #5
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	609a      	str	r2, [r3, #8]
}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40011000 	.word	0x40011000
 8001008:	40011400 	.word	0x40011400
 800100c:	51eb851f 	.word	0x51eb851f

08001010 <USART_IRQInterruptConfig>:
 *
 * @Note              - Configuration in this API is processor specific (Cortex M4)
 * 						Only 96 IRQ numbers implemented on STM32F446xx MCU
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	460a      	mov	r2, r1
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8001020:	79bb      	ldrb	r3, [r7, #6]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d14e      	bne.n	80010c4 <USART_IRQInterruptConfig+0xb4>
	{
		if(IRQNumber < 32)
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b1f      	cmp	r3, #31
 800102a:	d80a      	bhi.n	8001042 <USART_IRQInterruptConfig+0x32>
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 800102c:	4b4f      	ldr	r3, [pc, #316]	; (800116c <USART_IRQInterruptConfig+0x15c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	79fa      	ldrb	r2, [r7, #7]
 8001032:	2101      	movs	r1, #1
 8001034:	fa01 f202 	lsl.w	r2, r1, r2
 8001038:	4611      	mov	r1, r2
 800103a:	4a4c      	ldr	r2, [pc, #304]	; (800116c <USART_IRQInterruptConfig+0x15c>)
 800103c:	430b      	orrs	r3, r1
 800103e:	6013      	str	r3, [r2, #0]
			//program ICER3 register
			*NVIC_ICER3 |= (1 << (IRQNumber % 96));
		}
	}

}
 8001040:	e08f      	b.n	8001162 <USART_IRQInterruptConfig+0x152>
		}else if(IRQNumber >= 32 && IRQNumber < 64)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b1f      	cmp	r3, #31
 8001046:	d90f      	bls.n	8001068 <USART_IRQInterruptConfig+0x58>
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	2b3f      	cmp	r3, #63	; 0x3f
 800104c:	d80c      	bhi.n	8001068 <USART_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800104e:	4b48      	ldr	r3, [pc, #288]	; (8001170 <USART_IRQInterruptConfig+0x160>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	79fa      	ldrb	r2, [r7, #7]
 8001054:	f002 021f 	and.w	r2, r2, #31
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f202 	lsl.w	r2, r1, r2
 800105e:	4611      	mov	r1, r2
 8001060:	4a43      	ldr	r2, [pc, #268]	; (8001170 <USART_IRQInterruptConfig+0x160>)
 8001062:	430b      	orrs	r3, r1
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e07c      	b.n	8001162 <USART_IRQInterruptConfig+0x152>
		}else if(IRQNumber >= 64 && IRQNumber < 96)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b3f      	cmp	r3, #63	; 0x3f
 800106c:	d90f      	bls.n	800108e <USART_IRQInterruptConfig+0x7e>
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b5f      	cmp	r3, #95	; 0x5f
 8001072:	d80c      	bhi.n	800108e <USART_IRQInterruptConfig+0x7e>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8001074:	4b3f      	ldr	r3, [pc, #252]	; (8001174 <USART_IRQInterruptConfig+0x164>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	79fa      	ldrb	r2, [r7, #7]
 800107a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	4611      	mov	r1, r2
 8001086:	4a3b      	ldr	r2, [pc, #236]	; (8001174 <USART_IRQInterruptConfig+0x164>)
 8001088:	430b      	orrs	r3, r1
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	e069      	b.n	8001162 <USART_IRQInterruptConfig+0x152>
		}else if(IRQNumber >= 96 && IRQNumber < 128)
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	2b5f      	cmp	r3, #95	; 0x5f
 8001092:	d966      	bls.n	8001162 <USART_IRQInterruptConfig+0x152>
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db62      	blt.n	8001162 <USART_IRQInterruptConfig+0x152>
			*NVIC_ISER3 |= (1 << (IRQNumber % 96));
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <USART_IRQInterruptConfig+0x168>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	79fa      	ldrb	r2, [r7, #7]
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <USART_IRQInterruptConfig+0x16c>)
 80010a4:	fba3 1302 	umull	r1, r3, r3, r2
 80010a8:	0999      	lsrs	r1, r3, #6
 80010aa:	460b      	mov	r3, r1
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	440b      	add	r3, r1
 80010b0:	015b      	lsls	r3, r3, #5
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	2301      	movs	r3, #1
 80010ba:	4093      	lsls	r3, r2
 80010bc:	4a2e      	ldr	r2, [pc, #184]	; (8001178 <USART_IRQInterruptConfig+0x168>)
 80010be:	4303      	orrs	r3, r0
 80010c0:	6013      	str	r3, [r2, #0]
}
 80010c2:	e04e      	b.n	8001162 <USART_IRQInterruptConfig+0x152>
		if(IRQNumber < 32)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b1f      	cmp	r3, #31
 80010c8:	d80a      	bhi.n	80010e0 <USART_IRQInterruptConfig+0xd0>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <USART_IRQInterruptConfig+0x170>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	2101      	movs	r1, #1
 80010d2:	fa01 f202 	lsl.w	r2, r1, r2
 80010d6:	4611      	mov	r1, r2
 80010d8:	4a29      	ldr	r2, [pc, #164]	; (8001180 <USART_IRQInterruptConfig+0x170>)
 80010da:	430b      	orrs	r3, r1
 80010dc:	6013      	str	r3, [r2, #0]
}
 80010de:	e040      	b.n	8001162 <USART_IRQInterruptConfig+0x152>
		}else if(IRQNumber >= 32 && IRQNumber < 64)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b1f      	cmp	r3, #31
 80010e4:	d90f      	bls.n	8001106 <USART_IRQInterruptConfig+0xf6>
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b3f      	cmp	r3, #63	; 0x3f
 80010ea:	d80c      	bhi.n	8001106 <USART_IRQInterruptConfig+0xf6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <USART_IRQInterruptConfig+0x174>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	79fa      	ldrb	r2, [r7, #7]
 80010f2:	f002 021f 	and.w	r2, r2, #31
 80010f6:	2101      	movs	r1, #1
 80010f8:	fa01 f202 	lsl.w	r2, r1, r2
 80010fc:	4611      	mov	r1, r2
 80010fe:	4a21      	ldr	r2, [pc, #132]	; (8001184 <USART_IRQInterruptConfig+0x174>)
 8001100:	430b      	orrs	r3, r1
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	e02d      	b.n	8001162 <USART_IRQInterruptConfig+0x152>
		}else if(IRQNumber >= 64 && IRQNumber < 96)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b3f      	cmp	r3, #63	; 0x3f
 800110a:	d90f      	bls.n	800112c <USART_IRQInterruptConfig+0x11c>
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b5f      	cmp	r3, #95	; 0x5f
 8001110:	d80c      	bhi.n	800112c <USART_IRQInterruptConfig+0x11c>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <USART_IRQInterruptConfig+0x178>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	4611      	mov	r1, r2
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <USART_IRQInterruptConfig+0x178>)
 8001126:	430b      	orrs	r3, r1
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e01a      	b.n	8001162 <USART_IRQInterruptConfig+0x152>
		}else if(IRQNumber >= 96 && IRQNumber < 128)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	2b5f      	cmp	r3, #95	; 0x5f
 8001130:	d917      	bls.n	8001162 <USART_IRQInterruptConfig+0x152>
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	db13      	blt.n	8001162 <USART_IRQInterruptConfig+0x152>
			*NVIC_ICER3 |= (1 << (IRQNumber % 96));
 800113a:	4b14      	ldr	r3, [pc, #80]	; (800118c <USART_IRQInterruptConfig+0x17c>)
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <USART_IRQInterruptConfig+0x16c>)
 8001142:	fba3 1302 	umull	r1, r3, r3, r2
 8001146:	0999      	lsrs	r1, r3, #6
 8001148:	460b      	mov	r3, r1
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	440b      	add	r3, r1
 800114e:	015b      	lsls	r3, r3, #5
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	2301      	movs	r3, #1
 8001158:	4093      	lsls	r3, r2
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <USART_IRQInterruptConfig+0x17c>)
 800115c:	4303      	orrs	r3, r0
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	e7ff      	b.n	8001162 <USART_IRQInterruptConfig+0x152>
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	e000e100 	.word	0xe000e100
 8001170:	e000e104 	.word	0xe000e104
 8001174:	e000e108 	.word	0xe000e108
 8001178:	e000e10c 	.word	0xe000e10c
 800117c:	aaaaaaab 	.word	0xaaaaaaab
 8001180:	e000e180 	.word	0xe000e180
 8001184:	e000e184 	.word	0xe000e184
 8001188:	e000e188 	.word	0xe000e188
 800118c:	e000e18c 	.word	0xe000e18c

08001190 <USART_IRQHandling>:
 * @return            - none
 *
 * @Note              - none
 */
void USART_IRQHandling(USART_Handle_t *pUSARTHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	uint16_t *pdata;

	/*************************Check for TC flag ********************************************/

    //Implement the code to check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TC);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a2:	617b      	str	r3, [r7, #20]

	 //Implement the code to check the state of TCEIE bit
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TCIE);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ae:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2 )
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d021      	beq.n	80011fa <USART_IRQHandling+0x6a>
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d01e      	beq.n	80011fa <USART_IRQHandling+0x6a>
	{
		//this interrupt is because of TC

		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d119      	bne.n	80011fa <USART_IRQHandling+0x6a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen )
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d115      	bne.n	80011fa <USART_IRQHandling+0x6a>
			{
				//Implement the code to clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011dc:	601a      	str	r2, [r3, #0]

				//Implement the code to clear the TCIE control bit

				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]

				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]

				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]

				//Call the application call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 80011f2:	2100      	movs	r1, #0
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff f957 	bl	80004a8 <USART_ApplicationEventCallback>
	}

	/*************************Check for TXE flag ********************************************/

	//Implement the code to check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001204:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001210:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d055      	beq.n	80012c4 <USART_IRQHandling+0x134>
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d052      	beq.n	80012c4 <USART_IRQHandling+0x134>
	{
		//this interrupt is because of TXE

		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d14d      	bne.n	80012c4 <USART_IRQHandling+0x134>
		{
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d03d      	beq.n	80012ac <USART_IRQHandling+0x11c>
			{
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7b5b      	ldrb	r3, [r3, #13]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d129      	bne.n	800128c <USART_IRQHandling+0xfc>
				{
					//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	60fb      	str	r3, [r7, #12]
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	461a      	mov	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800124c:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7b9b      	ldrb	r3, [r3, #14]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10f      	bne.n	8001276 <USART_IRQHandling+0xe6>
					{
						//No parity is used in this transfer , so 9bits of user data will be sent
						//Implement the code to increment pTxBuffer twice
						pUSARTHandle->pTxBuffer++;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	611a      	str	r2, [r3, #16]
						pUSARTHandle->pTxBuffer++;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	1e9a      	subs	r2, r3, #2
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
 8001274:	e01a      	b.n	80012ac <USART_IRQHandling+0x11c>
					}
					else
					{
						//Parity bit is used in this transfer . so 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	691b      	ldr	r3, [r3, #16]
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=1;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	1e5a      	subs	r2, r3, #1
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	619a      	str	r2, [r3, #24]
 800128a:	e00f      	b.n	80012ac <USART_IRQHandling+0x11c>
					}
				}
				else
				{
					//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*pUSARTHandle->pTxBuffer  & (uint8_t)0xFF);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	781a      	ldrb	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]

					//Implement the code to increment the buffer address
					pUSARTHandle->pTxBuffer++;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen-=1;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	1e5a      	subs	r2, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	619a      	str	r2, [r3, #24]
				}

			}
			if (pUSARTHandle->TxLen == 0 )
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d107      	bne.n	80012c4 <USART_IRQHandling+0x134>
			{
				//TxLen is zero
				//Implement the code to clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c2:	60da      	str	r2, [r3, #12]
		}
	}

	/*************************Check for RXNE flag ********************************************/

	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	617b      	str	r3, [r7, #20]
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2 )
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d073      	beq.n	80013ca <USART_IRQHandling+0x23a>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d070      	beq.n	80013ca <USART_IRQHandling+0x23a>
	{
		//this interrupt is because of rxne
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d16b      	bne.n	80013ca <USART_IRQHandling+0x23a>
		{
			if(pUSARTHandle->RxLen > 0)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d053      	beq.n	80013a2 <USART_IRQHandling+0x212>
			{
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7b5b      	ldrb	r3, [r3, #13]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d12f      	bne.n	8001362 <USART_IRQHandling+0x1d2>
				{
					//We are going to receive 9bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	7b9b      	ldrb	r3, [r3, #14]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d119      	bne.n	800133e <USART_IRQHandling+0x1ae>
					{
						//No parity is used , so all 9bits will be of user data

						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	b29a      	uxth	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800131a:	b292      	uxth	r2, r2
 800131c:	801a      	strh	r2, [r3, #0]

						//Now increment the pRxBuffer two times
						pUSARTHandle->pRxBuffer++;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	615a      	str	r2, [r3, #20]
						pUSARTHandle->pRxBuffer++;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	1e9a      	subs	r2, r3, #2
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	61da      	str	r2, [r3, #28]
 800133c:	e031      	b.n	80013a2 <USART_IRQHandling+0x212>
					}
					else
					{
						//Parity is used, so 8bits will be of user data and 1 bit is parity
						 *pUSARTHandle->pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	701a      	strb	r2, [r3, #0]
						 pUSARTHandle->pRxBuffer++;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	695b      	ldr	r3, [r3, #20]
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen-=1;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	1e5a      	subs	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	61da      	str	r2, [r3, #28]
 8001360:	e01f      	b.n	80013a2 <USART_IRQHandling+0x212>
				else
				{
					//We are going to receive 8bit data in a frame

					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7b9b      	ldrb	r3, [r3, #14]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d107      	bne.n	800137a <USART_IRQHandling+0x1ea>
					{
						//No parity is used , so all 8bits will be of user data

						//read 8 bits from DR
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e009      	b.n	800138e <USART_IRQHandling+0x1fe>
					else
					{
						//Parity is used, so , 7 bits will be of user data and 1 bit is parity

						//read only 7 bits , hence mask the DR with 0X7F
						 *pUSARTHandle->pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	701a      	strb	r2, [r3, #0]

					}

					//Now , increment the pRxBuffer
					pUSARTHandle->pRxBuffer++;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	615a      	str	r2, [r3, #20]
					 pUSARTHandle->RxLen-=1;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	61da      	str	r2, [r3, #28]
				}


			}//if of >0

			if(! pUSARTHandle->RxLen)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10f      	bne.n	80013ca <USART_IRQHandling+0x23a>
			{
				//disable the rxne
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68da      	ldr	r2, [r3, #12]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0220 	bic.w	r2, r2, #32
 80013b8:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 80013c2:	2101      	movs	r1, #1
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff f86f 	bl	80004a8 <USART_ApplicationEventCallback>

	/*************************Check for CTS flag ********************************************/
	//Note : CTS feature is not applicable for UART4 and UART5

	//Implement the code to check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d4:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of CTSE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e0:	613b      	str	r3, [r7, #16]

	//Implement the code to check the state of CTSIE bit in CR3 (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	60bb      	str	r3, [r7, #8]


	if(temp1  && temp2 )
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00e      	beq.n	8001412 <USART_IRQHandling+0x282>
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <USART_IRQHandling+0x282>
	{
		//Implement the code to clear the CTS flag in SR
		pUSARTHandle->pUSARTx->SR &=  ~( 1 << USART_SR_CTS);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001408:	601a      	str	r2, [r3, #0]

		//this interrupt is because of cts
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 800140a:	2103      	movs	r1, #3
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff f84b 	bl	80004a8 <USART_ApplicationEventCallback>
	}

	/*************************Check for IDLE detection flag ********************************************/

	//Implement the code to check the status of IDLE flag bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	617b      	str	r3, [r7, #20]

	//Implement the code to check the state of IDLEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	613b      	str	r3, [r7, #16]


	if(temp1 && temp2)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00f      	beq.n	8001450 <USART_IRQHandling+0x2c0>
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00c      	beq.n	8001450 <USART_IRQHandling+0x2c0>
	{
		//Implement the code to clear the IDLE flag. Refer to the RM to understand the clear sequence
		temp1 = pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_IDLE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	f023 0310 	bic.w	r3, r3, #16
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	617b      	str	r3, [r7, #20]

		//this interrupt is because of idle
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8001448:	2102      	movs	r1, #2
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff f82c 	bl	80004a8 <USART_ApplicationEventCallback>
	}

	/*************************Check for Overrun detection flag ********************************************/

	//Implement the code to check the status of ORE flag  in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	617b      	str	r3, [r7, #20]

	//Implement the code to check the status of RXNEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	f003 0305 	and.w	r3, r3, #5
 8001466:	613b      	str	r3, [r7, #16]


	if(temp1  && temp2 )
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <USART_IRQHandling+0x2ec>
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <USART_IRQHandling+0x2ec>
	{
		//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .

		//this interrupt is because of Overrun error
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8001474:	2107      	movs	r1, #7
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff f816 	bl	80004a8 <USART_ApplicationEventCallback>

	//Noise Flag, Overrun error and Framing Error in multibuffer communication
	//We dont discuss multibuffer communication in this course. please refer to the RM
	//The blow code will get executed in only if multibuffer mode is used.

	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	613b      	str	r3, [r7, #16]

	if(temp2 )
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01e      	beq.n	80014cc <USART_IRQHandling+0x33c>
	{
		temp1 = pUSARTHandle->pUSARTx->SR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE))
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <USART_IRQHandling+0x318>
			/*
				This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 80014a0:	2105      	movs	r1, #5
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff f800 	bl	80004a8 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_NF) )
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <USART_IRQHandling+0x32a>
			/*
				This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register).
			*/
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 80014b2:	2106      	movs	r1, #6
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7fe fff7 	bl	80004a8 <USART_ApplicationEventCallback>
		}

		if(temp1 & ( 1 << USART_SR_ORE) )
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <USART_IRQHandling+0x33c>
		{
			USART_ApplicationEventCallback(pUSARTHandle, USART_ERR_ORE);
 80014c4:	2107      	movs	r1, #7
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7fe ffee 	bl	80004a8 <USART_ApplicationEventCallback>
		}
	}

}
 80014cc:	bf00      	nop
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <__libc_init_array>:
 80014d4:	b570      	push	{r4, r5, r6, lr}
 80014d6:	4e0d      	ldr	r6, [pc, #52]	; (800150c <__libc_init_array+0x38>)
 80014d8:	4c0d      	ldr	r4, [pc, #52]	; (8001510 <__libc_init_array+0x3c>)
 80014da:	1ba4      	subs	r4, r4, r6
 80014dc:	10a4      	asrs	r4, r4, #2
 80014de:	2500      	movs	r5, #0
 80014e0:	42a5      	cmp	r5, r4
 80014e2:	d109      	bne.n	80014f8 <__libc_init_array+0x24>
 80014e4:	4e0b      	ldr	r6, [pc, #44]	; (8001514 <__libc_init_array+0x40>)
 80014e6:	4c0c      	ldr	r4, [pc, #48]	; (8001518 <__libc_init_array+0x44>)
 80014e8:	f001 fa38 	bl	800295c <_init>
 80014ec:	1ba4      	subs	r4, r4, r6
 80014ee:	10a4      	asrs	r4, r4, #2
 80014f0:	2500      	movs	r5, #0
 80014f2:	42a5      	cmp	r5, r4
 80014f4:	d105      	bne.n	8001502 <__libc_init_array+0x2e>
 80014f6:	bd70      	pop	{r4, r5, r6, pc}
 80014f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014fc:	4798      	blx	r3
 80014fe:	3501      	adds	r5, #1
 8001500:	e7ee      	b.n	80014e0 <__libc_init_array+0xc>
 8001502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001506:	4798      	blx	r3
 8001508:	3501      	adds	r5, #1
 800150a:	e7f2      	b.n	80014f2 <__libc_init_array+0x1e>
 800150c:	08002aa8 	.word	0x08002aa8
 8001510:	08002aa8 	.word	0x08002aa8
 8001514:	08002aa8 	.word	0x08002aa8
 8001518:	08002aac 	.word	0x08002aac

0800151c <memset>:
 800151c:	4402      	add	r2, r0
 800151e:	4603      	mov	r3, r0
 8001520:	4293      	cmp	r3, r2
 8001522:	d100      	bne.n	8001526 <memset+0xa>
 8001524:	4770      	bx	lr
 8001526:	f803 1b01 	strb.w	r1, [r3], #1
 800152a:	e7f9      	b.n	8001520 <memset+0x4>

0800152c <iprintf>:
 800152c:	b40f      	push	{r0, r1, r2, r3}
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <iprintf+0x2c>)
 8001530:	b513      	push	{r0, r1, r4, lr}
 8001532:	681c      	ldr	r4, [r3, #0]
 8001534:	b124      	cbz	r4, 8001540 <iprintf+0x14>
 8001536:	69a3      	ldr	r3, [r4, #24]
 8001538:	b913      	cbnz	r3, 8001540 <iprintf+0x14>
 800153a:	4620      	mov	r0, r4
 800153c:	f000 fa22 	bl	8001984 <__sinit>
 8001540:	ab05      	add	r3, sp, #20
 8001542:	9a04      	ldr	r2, [sp, #16]
 8001544:	68a1      	ldr	r1, [r4, #8]
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	4620      	mov	r0, r4
 800154a:	f000 fbd9 	bl	8001d00 <_vfiprintf_r>
 800154e:	b002      	add	sp, #8
 8001550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001554:	b004      	add	sp, #16
 8001556:	4770      	bx	lr
 8001558:	20000024 	.word	0x20000024

0800155c <_puts_r>:
 800155c:	b570      	push	{r4, r5, r6, lr}
 800155e:	460e      	mov	r6, r1
 8001560:	4605      	mov	r5, r0
 8001562:	b118      	cbz	r0, 800156c <_puts_r+0x10>
 8001564:	6983      	ldr	r3, [r0, #24]
 8001566:	b90b      	cbnz	r3, 800156c <_puts_r+0x10>
 8001568:	f000 fa0c 	bl	8001984 <__sinit>
 800156c:	69ab      	ldr	r3, [r5, #24]
 800156e:	68ac      	ldr	r4, [r5, #8]
 8001570:	b913      	cbnz	r3, 8001578 <_puts_r+0x1c>
 8001572:	4628      	mov	r0, r5
 8001574:	f000 fa06 	bl	8001984 <__sinit>
 8001578:	4b23      	ldr	r3, [pc, #140]	; (8001608 <_puts_r+0xac>)
 800157a:	429c      	cmp	r4, r3
 800157c:	d117      	bne.n	80015ae <_puts_r+0x52>
 800157e:	686c      	ldr	r4, [r5, #4]
 8001580:	89a3      	ldrh	r3, [r4, #12]
 8001582:	071b      	lsls	r3, r3, #28
 8001584:	d51d      	bpl.n	80015c2 <_puts_r+0x66>
 8001586:	6923      	ldr	r3, [r4, #16]
 8001588:	b1db      	cbz	r3, 80015c2 <_puts_r+0x66>
 800158a:	3e01      	subs	r6, #1
 800158c:	68a3      	ldr	r3, [r4, #8]
 800158e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001592:	3b01      	subs	r3, #1
 8001594:	60a3      	str	r3, [r4, #8]
 8001596:	b9e9      	cbnz	r1, 80015d4 <_puts_r+0x78>
 8001598:	2b00      	cmp	r3, #0
 800159a:	da2e      	bge.n	80015fa <_puts_r+0x9e>
 800159c:	4622      	mov	r2, r4
 800159e:	210a      	movs	r1, #10
 80015a0:	4628      	mov	r0, r5
 80015a2:	f000 f83f 	bl	8001624 <__swbuf_r>
 80015a6:	3001      	adds	r0, #1
 80015a8:	d011      	beq.n	80015ce <_puts_r+0x72>
 80015aa:	200a      	movs	r0, #10
 80015ac:	e011      	b.n	80015d2 <_puts_r+0x76>
 80015ae:	4b17      	ldr	r3, [pc, #92]	; (800160c <_puts_r+0xb0>)
 80015b0:	429c      	cmp	r4, r3
 80015b2:	d101      	bne.n	80015b8 <_puts_r+0x5c>
 80015b4:	68ac      	ldr	r4, [r5, #8]
 80015b6:	e7e3      	b.n	8001580 <_puts_r+0x24>
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <_puts_r+0xb4>)
 80015ba:	429c      	cmp	r4, r3
 80015bc:	bf08      	it	eq
 80015be:	68ec      	ldreq	r4, [r5, #12]
 80015c0:	e7de      	b.n	8001580 <_puts_r+0x24>
 80015c2:	4621      	mov	r1, r4
 80015c4:	4628      	mov	r0, r5
 80015c6:	f000 f87f 	bl	80016c8 <__swsetup_r>
 80015ca:	2800      	cmp	r0, #0
 80015cc:	d0dd      	beq.n	800158a <_puts_r+0x2e>
 80015ce:	f04f 30ff 	mov.w	r0, #4294967295
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da04      	bge.n	80015e2 <_puts_r+0x86>
 80015d8:	69a2      	ldr	r2, [r4, #24]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dc06      	bgt.n	80015ec <_puts_r+0x90>
 80015de:	290a      	cmp	r1, #10
 80015e0:	d004      	beq.n	80015ec <_puts_r+0x90>
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	6022      	str	r2, [r4, #0]
 80015e8:	7019      	strb	r1, [r3, #0]
 80015ea:	e7cf      	b.n	800158c <_puts_r+0x30>
 80015ec:	4622      	mov	r2, r4
 80015ee:	4628      	mov	r0, r5
 80015f0:	f000 f818 	bl	8001624 <__swbuf_r>
 80015f4:	3001      	adds	r0, #1
 80015f6:	d1c9      	bne.n	800158c <_puts_r+0x30>
 80015f8:	e7e9      	b.n	80015ce <_puts_r+0x72>
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	200a      	movs	r0, #10
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	6022      	str	r2, [r4, #0]
 8001602:	7018      	strb	r0, [r3, #0]
 8001604:	e7e5      	b.n	80015d2 <_puts_r+0x76>
 8001606:	bf00      	nop
 8001608:	08002a18 	.word	0x08002a18
 800160c:	08002a38 	.word	0x08002a38
 8001610:	080029f8 	.word	0x080029f8

08001614 <puts>:
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <puts+0xc>)
 8001616:	4601      	mov	r1, r0
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	f7ff bf9f 	b.w	800155c <_puts_r>
 800161e:	bf00      	nop
 8001620:	20000024 	.word	0x20000024

08001624 <__swbuf_r>:
 8001624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001626:	460e      	mov	r6, r1
 8001628:	4614      	mov	r4, r2
 800162a:	4605      	mov	r5, r0
 800162c:	b118      	cbz	r0, 8001636 <__swbuf_r+0x12>
 800162e:	6983      	ldr	r3, [r0, #24]
 8001630:	b90b      	cbnz	r3, 8001636 <__swbuf_r+0x12>
 8001632:	f000 f9a7 	bl	8001984 <__sinit>
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <__swbuf_r+0x98>)
 8001638:	429c      	cmp	r4, r3
 800163a:	d12a      	bne.n	8001692 <__swbuf_r+0x6e>
 800163c:	686c      	ldr	r4, [r5, #4]
 800163e:	69a3      	ldr	r3, [r4, #24]
 8001640:	60a3      	str	r3, [r4, #8]
 8001642:	89a3      	ldrh	r3, [r4, #12]
 8001644:	071a      	lsls	r2, r3, #28
 8001646:	d52e      	bpl.n	80016a6 <__swbuf_r+0x82>
 8001648:	6923      	ldr	r3, [r4, #16]
 800164a:	b363      	cbz	r3, 80016a6 <__swbuf_r+0x82>
 800164c:	6923      	ldr	r3, [r4, #16]
 800164e:	6820      	ldr	r0, [r4, #0]
 8001650:	1ac0      	subs	r0, r0, r3
 8001652:	6963      	ldr	r3, [r4, #20]
 8001654:	b2f6      	uxtb	r6, r6
 8001656:	4283      	cmp	r3, r0
 8001658:	4637      	mov	r7, r6
 800165a:	dc04      	bgt.n	8001666 <__swbuf_r+0x42>
 800165c:	4621      	mov	r1, r4
 800165e:	4628      	mov	r0, r5
 8001660:	f000 f926 	bl	80018b0 <_fflush_r>
 8001664:	bb28      	cbnz	r0, 80016b2 <__swbuf_r+0x8e>
 8001666:	68a3      	ldr	r3, [r4, #8]
 8001668:	3b01      	subs	r3, #1
 800166a:	60a3      	str	r3, [r4, #8]
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	6022      	str	r2, [r4, #0]
 8001672:	701e      	strb	r6, [r3, #0]
 8001674:	6963      	ldr	r3, [r4, #20]
 8001676:	3001      	adds	r0, #1
 8001678:	4283      	cmp	r3, r0
 800167a:	d004      	beq.n	8001686 <__swbuf_r+0x62>
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	07db      	lsls	r3, r3, #31
 8001680:	d519      	bpl.n	80016b6 <__swbuf_r+0x92>
 8001682:	2e0a      	cmp	r6, #10
 8001684:	d117      	bne.n	80016b6 <__swbuf_r+0x92>
 8001686:	4621      	mov	r1, r4
 8001688:	4628      	mov	r0, r5
 800168a:	f000 f911 	bl	80018b0 <_fflush_r>
 800168e:	b190      	cbz	r0, 80016b6 <__swbuf_r+0x92>
 8001690:	e00f      	b.n	80016b2 <__swbuf_r+0x8e>
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <__swbuf_r+0x9c>)
 8001694:	429c      	cmp	r4, r3
 8001696:	d101      	bne.n	800169c <__swbuf_r+0x78>
 8001698:	68ac      	ldr	r4, [r5, #8]
 800169a:	e7d0      	b.n	800163e <__swbuf_r+0x1a>
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <__swbuf_r+0xa0>)
 800169e:	429c      	cmp	r4, r3
 80016a0:	bf08      	it	eq
 80016a2:	68ec      	ldreq	r4, [r5, #12]
 80016a4:	e7cb      	b.n	800163e <__swbuf_r+0x1a>
 80016a6:	4621      	mov	r1, r4
 80016a8:	4628      	mov	r0, r5
 80016aa:	f000 f80d 	bl	80016c8 <__swsetup_r>
 80016ae:	2800      	cmp	r0, #0
 80016b0:	d0cc      	beq.n	800164c <__swbuf_r+0x28>
 80016b2:	f04f 37ff 	mov.w	r7, #4294967295
 80016b6:	4638      	mov	r0, r7
 80016b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016ba:	bf00      	nop
 80016bc:	08002a18 	.word	0x08002a18
 80016c0:	08002a38 	.word	0x08002a38
 80016c4:	080029f8 	.word	0x080029f8

080016c8 <__swsetup_r>:
 80016c8:	4b32      	ldr	r3, [pc, #200]	; (8001794 <__swsetup_r+0xcc>)
 80016ca:	b570      	push	{r4, r5, r6, lr}
 80016cc:	681d      	ldr	r5, [r3, #0]
 80016ce:	4606      	mov	r6, r0
 80016d0:	460c      	mov	r4, r1
 80016d2:	b125      	cbz	r5, 80016de <__swsetup_r+0x16>
 80016d4:	69ab      	ldr	r3, [r5, #24]
 80016d6:	b913      	cbnz	r3, 80016de <__swsetup_r+0x16>
 80016d8:	4628      	mov	r0, r5
 80016da:	f000 f953 	bl	8001984 <__sinit>
 80016de:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <__swsetup_r+0xd0>)
 80016e0:	429c      	cmp	r4, r3
 80016e2:	d10f      	bne.n	8001704 <__swsetup_r+0x3c>
 80016e4:	686c      	ldr	r4, [r5, #4]
 80016e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	0715      	lsls	r5, r2, #28
 80016ee:	d42c      	bmi.n	800174a <__swsetup_r+0x82>
 80016f0:	06d0      	lsls	r0, r2, #27
 80016f2:	d411      	bmi.n	8001718 <__swsetup_r+0x50>
 80016f4:	2209      	movs	r2, #9
 80016f6:	6032      	str	r2, [r6, #0]
 80016f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016fc:	81a3      	strh	r3, [r4, #12]
 80016fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001702:	e03e      	b.n	8001782 <__swsetup_r+0xba>
 8001704:	4b25      	ldr	r3, [pc, #148]	; (800179c <__swsetup_r+0xd4>)
 8001706:	429c      	cmp	r4, r3
 8001708:	d101      	bne.n	800170e <__swsetup_r+0x46>
 800170a:	68ac      	ldr	r4, [r5, #8]
 800170c:	e7eb      	b.n	80016e6 <__swsetup_r+0x1e>
 800170e:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <__swsetup_r+0xd8>)
 8001710:	429c      	cmp	r4, r3
 8001712:	bf08      	it	eq
 8001714:	68ec      	ldreq	r4, [r5, #12]
 8001716:	e7e6      	b.n	80016e6 <__swsetup_r+0x1e>
 8001718:	0751      	lsls	r1, r2, #29
 800171a:	d512      	bpl.n	8001742 <__swsetup_r+0x7a>
 800171c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800171e:	b141      	cbz	r1, 8001732 <__swsetup_r+0x6a>
 8001720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001724:	4299      	cmp	r1, r3
 8001726:	d002      	beq.n	800172e <__swsetup_r+0x66>
 8001728:	4630      	mov	r0, r6
 800172a:	f000 fa19 	bl	8001b60 <_free_r>
 800172e:	2300      	movs	r3, #0
 8001730:	6363      	str	r3, [r4, #52]	; 0x34
 8001732:	89a3      	ldrh	r3, [r4, #12]
 8001734:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001738:	81a3      	strh	r3, [r4, #12]
 800173a:	2300      	movs	r3, #0
 800173c:	6063      	str	r3, [r4, #4]
 800173e:	6923      	ldr	r3, [r4, #16]
 8001740:	6023      	str	r3, [r4, #0]
 8001742:	89a3      	ldrh	r3, [r4, #12]
 8001744:	f043 0308 	orr.w	r3, r3, #8
 8001748:	81a3      	strh	r3, [r4, #12]
 800174a:	6923      	ldr	r3, [r4, #16]
 800174c:	b94b      	cbnz	r3, 8001762 <__swsetup_r+0x9a>
 800174e:	89a3      	ldrh	r3, [r4, #12]
 8001750:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001758:	d003      	beq.n	8001762 <__swsetup_r+0x9a>
 800175a:	4621      	mov	r1, r4
 800175c:	4630      	mov	r0, r6
 800175e:	f000 f9bf 	bl	8001ae0 <__smakebuf_r>
 8001762:	89a2      	ldrh	r2, [r4, #12]
 8001764:	f012 0301 	ands.w	r3, r2, #1
 8001768:	d00c      	beq.n	8001784 <__swsetup_r+0xbc>
 800176a:	2300      	movs	r3, #0
 800176c:	60a3      	str	r3, [r4, #8]
 800176e:	6963      	ldr	r3, [r4, #20]
 8001770:	425b      	negs	r3, r3
 8001772:	61a3      	str	r3, [r4, #24]
 8001774:	6923      	ldr	r3, [r4, #16]
 8001776:	b953      	cbnz	r3, 800178e <__swsetup_r+0xc6>
 8001778:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800177c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001780:	d1ba      	bne.n	80016f8 <__swsetup_r+0x30>
 8001782:	bd70      	pop	{r4, r5, r6, pc}
 8001784:	0792      	lsls	r2, r2, #30
 8001786:	bf58      	it	pl
 8001788:	6963      	ldrpl	r3, [r4, #20]
 800178a:	60a3      	str	r3, [r4, #8]
 800178c:	e7f2      	b.n	8001774 <__swsetup_r+0xac>
 800178e:	2000      	movs	r0, #0
 8001790:	e7f7      	b.n	8001782 <__swsetup_r+0xba>
 8001792:	bf00      	nop
 8001794:	20000024 	.word	0x20000024
 8001798:	08002a18 	.word	0x08002a18
 800179c:	08002a38 	.word	0x08002a38
 80017a0:	080029f8 	.word	0x080029f8

080017a4 <__sflush_r>:
 80017a4:	898a      	ldrh	r2, [r1, #12]
 80017a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017aa:	4605      	mov	r5, r0
 80017ac:	0710      	lsls	r0, r2, #28
 80017ae:	460c      	mov	r4, r1
 80017b0:	d458      	bmi.n	8001864 <__sflush_r+0xc0>
 80017b2:	684b      	ldr	r3, [r1, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	dc05      	bgt.n	80017c4 <__sflush_r+0x20>
 80017b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	dc02      	bgt.n	80017c4 <__sflush_r+0x20>
 80017be:	2000      	movs	r0, #0
 80017c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017c6:	2e00      	cmp	r6, #0
 80017c8:	d0f9      	beq.n	80017be <__sflush_r+0x1a>
 80017ca:	2300      	movs	r3, #0
 80017cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017d0:	682f      	ldr	r7, [r5, #0]
 80017d2:	6a21      	ldr	r1, [r4, #32]
 80017d4:	602b      	str	r3, [r5, #0]
 80017d6:	d032      	beq.n	800183e <__sflush_r+0x9a>
 80017d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017da:	89a3      	ldrh	r3, [r4, #12]
 80017dc:	075a      	lsls	r2, r3, #29
 80017de:	d505      	bpl.n	80017ec <__sflush_r+0x48>
 80017e0:	6863      	ldr	r3, [r4, #4]
 80017e2:	1ac0      	subs	r0, r0, r3
 80017e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017e6:	b10b      	cbz	r3, 80017ec <__sflush_r+0x48>
 80017e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017ea:	1ac0      	subs	r0, r0, r3
 80017ec:	2300      	movs	r3, #0
 80017ee:	4602      	mov	r2, r0
 80017f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017f2:	6a21      	ldr	r1, [r4, #32]
 80017f4:	4628      	mov	r0, r5
 80017f6:	47b0      	blx	r6
 80017f8:	1c43      	adds	r3, r0, #1
 80017fa:	89a3      	ldrh	r3, [r4, #12]
 80017fc:	d106      	bne.n	800180c <__sflush_r+0x68>
 80017fe:	6829      	ldr	r1, [r5, #0]
 8001800:	291d      	cmp	r1, #29
 8001802:	d848      	bhi.n	8001896 <__sflush_r+0xf2>
 8001804:	4a29      	ldr	r2, [pc, #164]	; (80018ac <__sflush_r+0x108>)
 8001806:	40ca      	lsrs	r2, r1
 8001808:	07d6      	lsls	r6, r2, #31
 800180a:	d544      	bpl.n	8001896 <__sflush_r+0xf2>
 800180c:	2200      	movs	r2, #0
 800180e:	6062      	str	r2, [r4, #4]
 8001810:	04d9      	lsls	r1, r3, #19
 8001812:	6922      	ldr	r2, [r4, #16]
 8001814:	6022      	str	r2, [r4, #0]
 8001816:	d504      	bpl.n	8001822 <__sflush_r+0x7e>
 8001818:	1c42      	adds	r2, r0, #1
 800181a:	d101      	bne.n	8001820 <__sflush_r+0x7c>
 800181c:	682b      	ldr	r3, [r5, #0]
 800181e:	b903      	cbnz	r3, 8001822 <__sflush_r+0x7e>
 8001820:	6560      	str	r0, [r4, #84]	; 0x54
 8001822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001824:	602f      	str	r7, [r5, #0]
 8001826:	2900      	cmp	r1, #0
 8001828:	d0c9      	beq.n	80017be <__sflush_r+0x1a>
 800182a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800182e:	4299      	cmp	r1, r3
 8001830:	d002      	beq.n	8001838 <__sflush_r+0x94>
 8001832:	4628      	mov	r0, r5
 8001834:	f000 f994 	bl	8001b60 <_free_r>
 8001838:	2000      	movs	r0, #0
 800183a:	6360      	str	r0, [r4, #52]	; 0x34
 800183c:	e7c0      	b.n	80017c0 <__sflush_r+0x1c>
 800183e:	2301      	movs	r3, #1
 8001840:	4628      	mov	r0, r5
 8001842:	47b0      	blx	r6
 8001844:	1c41      	adds	r1, r0, #1
 8001846:	d1c8      	bne.n	80017da <__sflush_r+0x36>
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0c5      	beq.n	80017da <__sflush_r+0x36>
 800184e:	2b1d      	cmp	r3, #29
 8001850:	d001      	beq.n	8001856 <__sflush_r+0xb2>
 8001852:	2b16      	cmp	r3, #22
 8001854:	d101      	bne.n	800185a <__sflush_r+0xb6>
 8001856:	602f      	str	r7, [r5, #0]
 8001858:	e7b1      	b.n	80017be <__sflush_r+0x1a>
 800185a:	89a3      	ldrh	r3, [r4, #12]
 800185c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001860:	81a3      	strh	r3, [r4, #12]
 8001862:	e7ad      	b.n	80017c0 <__sflush_r+0x1c>
 8001864:	690f      	ldr	r7, [r1, #16]
 8001866:	2f00      	cmp	r7, #0
 8001868:	d0a9      	beq.n	80017be <__sflush_r+0x1a>
 800186a:	0793      	lsls	r3, r2, #30
 800186c:	680e      	ldr	r6, [r1, #0]
 800186e:	bf08      	it	eq
 8001870:	694b      	ldreq	r3, [r1, #20]
 8001872:	600f      	str	r7, [r1, #0]
 8001874:	bf18      	it	ne
 8001876:	2300      	movne	r3, #0
 8001878:	eba6 0807 	sub.w	r8, r6, r7
 800187c:	608b      	str	r3, [r1, #8]
 800187e:	f1b8 0f00 	cmp.w	r8, #0
 8001882:	dd9c      	ble.n	80017be <__sflush_r+0x1a>
 8001884:	4643      	mov	r3, r8
 8001886:	463a      	mov	r2, r7
 8001888:	6a21      	ldr	r1, [r4, #32]
 800188a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800188c:	4628      	mov	r0, r5
 800188e:	47b0      	blx	r6
 8001890:	2800      	cmp	r0, #0
 8001892:	dc06      	bgt.n	80018a2 <__sflush_r+0xfe>
 8001894:	89a3      	ldrh	r3, [r4, #12]
 8001896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800189a:	81a3      	strh	r3, [r4, #12]
 800189c:	f04f 30ff 	mov.w	r0, #4294967295
 80018a0:	e78e      	b.n	80017c0 <__sflush_r+0x1c>
 80018a2:	4407      	add	r7, r0
 80018a4:	eba8 0800 	sub.w	r8, r8, r0
 80018a8:	e7e9      	b.n	800187e <__sflush_r+0xda>
 80018aa:	bf00      	nop
 80018ac:	20400001 	.word	0x20400001

080018b0 <_fflush_r>:
 80018b0:	b538      	push	{r3, r4, r5, lr}
 80018b2:	690b      	ldr	r3, [r1, #16]
 80018b4:	4605      	mov	r5, r0
 80018b6:	460c      	mov	r4, r1
 80018b8:	b1db      	cbz	r3, 80018f2 <_fflush_r+0x42>
 80018ba:	b118      	cbz	r0, 80018c4 <_fflush_r+0x14>
 80018bc:	6983      	ldr	r3, [r0, #24]
 80018be:	b90b      	cbnz	r3, 80018c4 <_fflush_r+0x14>
 80018c0:	f000 f860 	bl	8001984 <__sinit>
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <_fflush_r+0x48>)
 80018c6:	429c      	cmp	r4, r3
 80018c8:	d109      	bne.n	80018de <_fflush_r+0x2e>
 80018ca:	686c      	ldr	r4, [r5, #4]
 80018cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018d0:	b17b      	cbz	r3, 80018f2 <_fflush_r+0x42>
 80018d2:	4621      	mov	r1, r4
 80018d4:	4628      	mov	r0, r5
 80018d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80018da:	f7ff bf63 	b.w	80017a4 <__sflush_r>
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_fflush_r+0x4c>)
 80018e0:	429c      	cmp	r4, r3
 80018e2:	d101      	bne.n	80018e8 <_fflush_r+0x38>
 80018e4:	68ac      	ldr	r4, [r5, #8]
 80018e6:	e7f1      	b.n	80018cc <_fflush_r+0x1c>
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <_fflush_r+0x50>)
 80018ea:	429c      	cmp	r4, r3
 80018ec:	bf08      	it	eq
 80018ee:	68ec      	ldreq	r4, [r5, #12]
 80018f0:	e7ec      	b.n	80018cc <_fflush_r+0x1c>
 80018f2:	2000      	movs	r0, #0
 80018f4:	bd38      	pop	{r3, r4, r5, pc}
 80018f6:	bf00      	nop
 80018f8:	08002a18 	.word	0x08002a18
 80018fc:	08002a38 	.word	0x08002a38
 8001900:	080029f8 	.word	0x080029f8

08001904 <std>:
 8001904:	2300      	movs	r3, #0
 8001906:	b510      	push	{r4, lr}
 8001908:	4604      	mov	r4, r0
 800190a:	e9c0 3300 	strd	r3, r3, [r0]
 800190e:	6083      	str	r3, [r0, #8]
 8001910:	8181      	strh	r1, [r0, #12]
 8001912:	6643      	str	r3, [r0, #100]	; 0x64
 8001914:	81c2      	strh	r2, [r0, #14]
 8001916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800191a:	6183      	str	r3, [r0, #24]
 800191c:	4619      	mov	r1, r3
 800191e:	2208      	movs	r2, #8
 8001920:	305c      	adds	r0, #92	; 0x5c
 8001922:	f7ff fdfb 	bl	800151c <memset>
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <std+0x38>)
 8001928:	6263      	str	r3, [r4, #36]	; 0x24
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <std+0x3c>)
 800192c:	62a3      	str	r3, [r4, #40]	; 0x28
 800192e:	4b05      	ldr	r3, [pc, #20]	; (8001944 <std+0x40>)
 8001930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001932:	4b05      	ldr	r3, [pc, #20]	; (8001948 <std+0x44>)
 8001934:	6224      	str	r4, [r4, #32]
 8001936:	6323      	str	r3, [r4, #48]	; 0x30
 8001938:	bd10      	pop	{r4, pc}
 800193a:	bf00      	nop
 800193c:	0800225d 	.word	0x0800225d
 8001940:	0800227f 	.word	0x0800227f
 8001944:	080022b7 	.word	0x080022b7
 8001948:	080022db 	.word	0x080022db

0800194c <_cleanup_r>:
 800194c:	4901      	ldr	r1, [pc, #4]	; (8001954 <_cleanup_r+0x8>)
 800194e:	f000 b885 	b.w	8001a5c <_fwalk_reent>
 8001952:	bf00      	nop
 8001954:	080018b1 	.word	0x080018b1

08001958 <__sfmoreglue>:
 8001958:	b570      	push	{r4, r5, r6, lr}
 800195a:	1e4a      	subs	r2, r1, #1
 800195c:	2568      	movs	r5, #104	; 0x68
 800195e:	4355      	muls	r5, r2
 8001960:	460e      	mov	r6, r1
 8001962:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001966:	f000 f949 	bl	8001bfc <_malloc_r>
 800196a:	4604      	mov	r4, r0
 800196c:	b140      	cbz	r0, 8001980 <__sfmoreglue+0x28>
 800196e:	2100      	movs	r1, #0
 8001970:	e9c0 1600 	strd	r1, r6, [r0]
 8001974:	300c      	adds	r0, #12
 8001976:	60a0      	str	r0, [r4, #8]
 8001978:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800197c:	f7ff fdce 	bl	800151c <memset>
 8001980:	4620      	mov	r0, r4
 8001982:	bd70      	pop	{r4, r5, r6, pc}

08001984 <__sinit>:
 8001984:	6983      	ldr	r3, [r0, #24]
 8001986:	b510      	push	{r4, lr}
 8001988:	4604      	mov	r4, r0
 800198a:	bb33      	cbnz	r3, 80019da <__sinit+0x56>
 800198c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001990:	6503      	str	r3, [r0, #80]	; 0x50
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <__sinit+0x58>)
 8001994:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <__sinit+0x5c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6282      	str	r2, [r0, #40]	; 0x28
 800199a:	4298      	cmp	r0, r3
 800199c:	bf04      	itt	eq
 800199e:	2301      	moveq	r3, #1
 80019a0:	6183      	streq	r3, [r0, #24]
 80019a2:	f000 f81f 	bl	80019e4 <__sfp>
 80019a6:	6060      	str	r0, [r4, #4]
 80019a8:	4620      	mov	r0, r4
 80019aa:	f000 f81b 	bl	80019e4 <__sfp>
 80019ae:	60a0      	str	r0, [r4, #8]
 80019b0:	4620      	mov	r0, r4
 80019b2:	f000 f817 	bl	80019e4 <__sfp>
 80019b6:	2200      	movs	r2, #0
 80019b8:	60e0      	str	r0, [r4, #12]
 80019ba:	2104      	movs	r1, #4
 80019bc:	6860      	ldr	r0, [r4, #4]
 80019be:	f7ff ffa1 	bl	8001904 <std>
 80019c2:	2201      	movs	r2, #1
 80019c4:	2109      	movs	r1, #9
 80019c6:	68a0      	ldr	r0, [r4, #8]
 80019c8:	f7ff ff9c 	bl	8001904 <std>
 80019cc:	2202      	movs	r2, #2
 80019ce:	2112      	movs	r1, #18
 80019d0:	68e0      	ldr	r0, [r4, #12]
 80019d2:	f7ff ff97 	bl	8001904 <std>
 80019d6:	2301      	movs	r3, #1
 80019d8:	61a3      	str	r3, [r4, #24]
 80019da:	bd10      	pop	{r4, pc}
 80019dc:	080029f4 	.word	0x080029f4
 80019e0:	0800194d 	.word	0x0800194d

080019e4 <__sfp>:
 80019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e6:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <__sfp+0x70>)
 80019e8:	681e      	ldr	r6, [r3, #0]
 80019ea:	69b3      	ldr	r3, [r6, #24]
 80019ec:	4607      	mov	r7, r0
 80019ee:	b913      	cbnz	r3, 80019f6 <__sfp+0x12>
 80019f0:	4630      	mov	r0, r6
 80019f2:	f7ff ffc7 	bl	8001984 <__sinit>
 80019f6:	3648      	adds	r6, #72	; 0x48
 80019f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	d503      	bpl.n	8001a08 <__sfp+0x24>
 8001a00:	6833      	ldr	r3, [r6, #0]
 8001a02:	b133      	cbz	r3, 8001a12 <__sfp+0x2e>
 8001a04:	6836      	ldr	r6, [r6, #0]
 8001a06:	e7f7      	b.n	80019f8 <__sfp+0x14>
 8001a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a0c:	b16d      	cbz	r5, 8001a2a <__sfp+0x46>
 8001a0e:	3468      	adds	r4, #104	; 0x68
 8001a10:	e7f4      	b.n	80019fc <__sfp+0x18>
 8001a12:	2104      	movs	r1, #4
 8001a14:	4638      	mov	r0, r7
 8001a16:	f7ff ff9f 	bl	8001958 <__sfmoreglue>
 8001a1a:	6030      	str	r0, [r6, #0]
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d1f1      	bne.n	8001a04 <__sfp+0x20>
 8001a20:	230c      	movs	r3, #12
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	4604      	mov	r4, r0
 8001a26:	4620      	mov	r0, r4
 8001a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <__sfp+0x74>)
 8001a2c:	6665      	str	r5, [r4, #100]	; 0x64
 8001a2e:	e9c4 5500 	strd	r5, r5, [r4]
 8001a32:	60a5      	str	r5, [r4, #8]
 8001a34:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001a38:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	4629      	mov	r1, r5
 8001a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a44:	f7ff fd6a 	bl	800151c <memset>
 8001a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a50:	e7e9      	b.n	8001a26 <__sfp+0x42>
 8001a52:	bf00      	nop
 8001a54:	080029f4 	.word	0x080029f4
 8001a58:	ffff0001 	.word	0xffff0001

08001a5c <_fwalk_reent>:
 8001a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a60:	4680      	mov	r8, r0
 8001a62:	4689      	mov	r9, r1
 8001a64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001a68:	2600      	movs	r6, #0
 8001a6a:	b914      	cbnz	r4, 8001a72 <_fwalk_reent+0x16>
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a72:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001a76:	3f01      	subs	r7, #1
 8001a78:	d501      	bpl.n	8001a7e <_fwalk_reent+0x22>
 8001a7a:	6824      	ldr	r4, [r4, #0]
 8001a7c:	e7f5      	b.n	8001a6a <_fwalk_reent+0xe>
 8001a7e:	89ab      	ldrh	r3, [r5, #12]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d907      	bls.n	8001a94 <_fwalk_reent+0x38>
 8001a84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	d003      	beq.n	8001a94 <_fwalk_reent+0x38>
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	4640      	mov	r0, r8
 8001a90:	47c8      	blx	r9
 8001a92:	4306      	orrs	r6, r0
 8001a94:	3568      	adds	r5, #104	; 0x68
 8001a96:	e7ee      	b.n	8001a76 <_fwalk_reent+0x1a>

08001a98 <__swhatbuf_r>:
 8001a98:	b570      	push	{r4, r5, r6, lr}
 8001a9a:	460e      	mov	r6, r1
 8001a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001aa0:	2900      	cmp	r1, #0
 8001aa2:	b096      	sub	sp, #88	; 0x58
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	461d      	mov	r5, r3
 8001aa8:	da07      	bge.n	8001aba <__swhatbuf_r+0x22>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	602b      	str	r3, [r5, #0]
 8001aae:	89b3      	ldrh	r3, [r6, #12]
 8001ab0:	061a      	lsls	r2, r3, #24
 8001ab2:	d410      	bmi.n	8001ad6 <__swhatbuf_r+0x3e>
 8001ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab8:	e00e      	b.n	8001ad8 <__swhatbuf_r+0x40>
 8001aba:	466a      	mov	r2, sp
 8001abc:	f000 fc34 	bl	8002328 <_fstat_r>
 8001ac0:	2800      	cmp	r0, #0
 8001ac2:	dbf2      	blt.n	8001aaa <__swhatbuf_r+0x12>
 8001ac4:	9a01      	ldr	r2, [sp, #4]
 8001ac6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001aca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001ace:	425a      	negs	r2, r3
 8001ad0:	415a      	adcs	r2, r3
 8001ad2:	602a      	str	r2, [r5, #0]
 8001ad4:	e7ee      	b.n	8001ab4 <__swhatbuf_r+0x1c>
 8001ad6:	2340      	movs	r3, #64	; 0x40
 8001ad8:	2000      	movs	r0, #0
 8001ada:	6023      	str	r3, [r4, #0]
 8001adc:	b016      	add	sp, #88	; 0x58
 8001ade:	bd70      	pop	{r4, r5, r6, pc}

08001ae0 <__smakebuf_r>:
 8001ae0:	898b      	ldrh	r3, [r1, #12]
 8001ae2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ae4:	079d      	lsls	r5, r3, #30
 8001ae6:	4606      	mov	r6, r0
 8001ae8:	460c      	mov	r4, r1
 8001aea:	d507      	bpl.n	8001afc <__smakebuf_r+0x1c>
 8001aec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001af0:	6023      	str	r3, [r4, #0]
 8001af2:	6123      	str	r3, [r4, #16]
 8001af4:	2301      	movs	r3, #1
 8001af6:	6163      	str	r3, [r4, #20]
 8001af8:	b002      	add	sp, #8
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
 8001afc:	ab01      	add	r3, sp, #4
 8001afe:	466a      	mov	r2, sp
 8001b00:	f7ff ffca 	bl	8001a98 <__swhatbuf_r>
 8001b04:	9900      	ldr	r1, [sp, #0]
 8001b06:	4605      	mov	r5, r0
 8001b08:	4630      	mov	r0, r6
 8001b0a:	f000 f877 	bl	8001bfc <_malloc_r>
 8001b0e:	b948      	cbnz	r0, 8001b24 <__smakebuf_r+0x44>
 8001b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b14:	059a      	lsls	r2, r3, #22
 8001b16:	d4ef      	bmi.n	8001af8 <__smakebuf_r+0x18>
 8001b18:	f023 0303 	bic.w	r3, r3, #3
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	81a3      	strh	r3, [r4, #12]
 8001b22:	e7e3      	b.n	8001aec <__smakebuf_r+0xc>
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <__smakebuf_r+0x7c>)
 8001b26:	62b3      	str	r3, [r6, #40]	; 0x28
 8001b28:	89a3      	ldrh	r3, [r4, #12]
 8001b2a:	6020      	str	r0, [r4, #0]
 8001b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b30:	81a3      	strh	r3, [r4, #12]
 8001b32:	9b00      	ldr	r3, [sp, #0]
 8001b34:	6163      	str	r3, [r4, #20]
 8001b36:	9b01      	ldr	r3, [sp, #4]
 8001b38:	6120      	str	r0, [r4, #16]
 8001b3a:	b15b      	cbz	r3, 8001b54 <__smakebuf_r+0x74>
 8001b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b40:	4630      	mov	r0, r6
 8001b42:	f000 fc03 	bl	800234c <_isatty_r>
 8001b46:	b128      	cbz	r0, 8001b54 <__smakebuf_r+0x74>
 8001b48:	89a3      	ldrh	r3, [r4, #12]
 8001b4a:	f023 0303 	bic.w	r3, r3, #3
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	81a3      	strh	r3, [r4, #12]
 8001b54:	89a3      	ldrh	r3, [r4, #12]
 8001b56:	431d      	orrs	r5, r3
 8001b58:	81a5      	strh	r5, [r4, #12]
 8001b5a:	e7cd      	b.n	8001af8 <__smakebuf_r+0x18>
 8001b5c:	0800194d 	.word	0x0800194d

08001b60 <_free_r>:
 8001b60:	b538      	push	{r3, r4, r5, lr}
 8001b62:	4605      	mov	r5, r0
 8001b64:	2900      	cmp	r1, #0
 8001b66:	d045      	beq.n	8001bf4 <_free_r+0x94>
 8001b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b6c:	1f0c      	subs	r4, r1, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bfb8      	it	lt
 8001b72:	18e4      	addlt	r4, r4, r3
 8001b74:	f000 fc0c 	bl	8002390 <__malloc_lock>
 8001b78:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <_free_r+0x98>)
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	b933      	cbnz	r3, 8001b8e <_free_r+0x2e>
 8001b80:	6063      	str	r3, [r4, #4]
 8001b82:	6014      	str	r4, [r2, #0]
 8001b84:	4628      	mov	r0, r5
 8001b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b8a:	f000 bc02 	b.w	8002392 <__malloc_unlock>
 8001b8e:	42a3      	cmp	r3, r4
 8001b90:	d90c      	bls.n	8001bac <_free_r+0x4c>
 8001b92:	6821      	ldr	r1, [r4, #0]
 8001b94:	1862      	adds	r2, r4, r1
 8001b96:	4293      	cmp	r3, r2
 8001b98:	bf04      	itt	eq
 8001b9a:	681a      	ldreq	r2, [r3, #0]
 8001b9c:	685b      	ldreq	r3, [r3, #4]
 8001b9e:	6063      	str	r3, [r4, #4]
 8001ba0:	bf04      	itt	eq
 8001ba2:	1852      	addeq	r2, r2, r1
 8001ba4:	6022      	streq	r2, [r4, #0]
 8001ba6:	6004      	str	r4, [r0, #0]
 8001ba8:	e7ec      	b.n	8001b84 <_free_r+0x24>
 8001baa:	4613      	mov	r3, r2
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	b10a      	cbz	r2, 8001bb4 <_free_r+0x54>
 8001bb0:	42a2      	cmp	r2, r4
 8001bb2:	d9fa      	bls.n	8001baa <_free_r+0x4a>
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	1858      	adds	r0, r3, r1
 8001bb8:	42a0      	cmp	r0, r4
 8001bba:	d10b      	bne.n	8001bd4 <_free_r+0x74>
 8001bbc:	6820      	ldr	r0, [r4, #0]
 8001bbe:	4401      	add	r1, r0
 8001bc0:	1858      	adds	r0, r3, r1
 8001bc2:	4282      	cmp	r2, r0
 8001bc4:	6019      	str	r1, [r3, #0]
 8001bc6:	d1dd      	bne.n	8001b84 <_free_r+0x24>
 8001bc8:	6810      	ldr	r0, [r2, #0]
 8001bca:	6852      	ldr	r2, [r2, #4]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	4401      	add	r1, r0
 8001bd0:	6019      	str	r1, [r3, #0]
 8001bd2:	e7d7      	b.n	8001b84 <_free_r+0x24>
 8001bd4:	d902      	bls.n	8001bdc <_free_r+0x7c>
 8001bd6:	230c      	movs	r3, #12
 8001bd8:	602b      	str	r3, [r5, #0]
 8001bda:	e7d3      	b.n	8001b84 <_free_r+0x24>
 8001bdc:	6820      	ldr	r0, [r4, #0]
 8001bde:	1821      	adds	r1, r4, r0
 8001be0:	428a      	cmp	r2, r1
 8001be2:	bf04      	itt	eq
 8001be4:	6811      	ldreq	r1, [r2, #0]
 8001be6:	6852      	ldreq	r2, [r2, #4]
 8001be8:	6062      	str	r2, [r4, #4]
 8001bea:	bf04      	itt	eq
 8001bec:	1809      	addeq	r1, r1, r0
 8001bee:	6021      	streq	r1, [r4, #0]
 8001bf0:	605c      	str	r4, [r3, #4]
 8001bf2:	e7c7      	b.n	8001b84 <_free_r+0x24>
 8001bf4:	bd38      	pop	{r3, r4, r5, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200000b4 	.word	0x200000b4

08001bfc <_malloc_r>:
 8001bfc:	b570      	push	{r4, r5, r6, lr}
 8001bfe:	1ccd      	adds	r5, r1, #3
 8001c00:	f025 0503 	bic.w	r5, r5, #3
 8001c04:	3508      	adds	r5, #8
 8001c06:	2d0c      	cmp	r5, #12
 8001c08:	bf38      	it	cc
 8001c0a:	250c      	movcc	r5, #12
 8001c0c:	2d00      	cmp	r5, #0
 8001c0e:	4606      	mov	r6, r0
 8001c10:	db01      	blt.n	8001c16 <_malloc_r+0x1a>
 8001c12:	42a9      	cmp	r1, r5
 8001c14:	d903      	bls.n	8001c1e <_malloc_r+0x22>
 8001c16:	230c      	movs	r3, #12
 8001c18:	6033      	str	r3, [r6, #0]
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	bd70      	pop	{r4, r5, r6, pc}
 8001c1e:	f000 fbb7 	bl	8002390 <__malloc_lock>
 8001c22:	4a21      	ldr	r2, [pc, #132]	; (8001ca8 <_malloc_r+0xac>)
 8001c24:	6814      	ldr	r4, [r2, #0]
 8001c26:	4621      	mov	r1, r4
 8001c28:	b991      	cbnz	r1, 8001c50 <_malloc_r+0x54>
 8001c2a:	4c20      	ldr	r4, [pc, #128]	; (8001cac <_malloc_r+0xb0>)
 8001c2c:	6823      	ldr	r3, [r4, #0]
 8001c2e:	b91b      	cbnz	r3, 8001c38 <_malloc_r+0x3c>
 8001c30:	4630      	mov	r0, r6
 8001c32:	f000 fb03 	bl	800223c <_sbrk_r>
 8001c36:	6020      	str	r0, [r4, #0]
 8001c38:	4629      	mov	r1, r5
 8001c3a:	4630      	mov	r0, r6
 8001c3c:	f000 fafe 	bl	800223c <_sbrk_r>
 8001c40:	1c43      	adds	r3, r0, #1
 8001c42:	d124      	bne.n	8001c8e <_malloc_r+0x92>
 8001c44:	230c      	movs	r3, #12
 8001c46:	6033      	str	r3, [r6, #0]
 8001c48:	4630      	mov	r0, r6
 8001c4a:	f000 fba2 	bl	8002392 <__malloc_unlock>
 8001c4e:	e7e4      	b.n	8001c1a <_malloc_r+0x1e>
 8001c50:	680b      	ldr	r3, [r1, #0]
 8001c52:	1b5b      	subs	r3, r3, r5
 8001c54:	d418      	bmi.n	8001c88 <_malloc_r+0x8c>
 8001c56:	2b0b      	cmp	r3, #11
 8001c58:	d90f      	bls.n	8001c7a <_malloc_r+0x7e>
 8001c5a:	600b      	str	r3, [r1, #0]
 8001c5c:	50cd      	str	r5, [r1, r3]
 8001c5e:	18cc      	adds	r4, r1, r3
 8001c60:	4630      	mov	r0, r6
 8001c62:	f000 fb96 	bl	8002392 <__malloc_unlock>
 8001c66:	f104 000b 	add.w	r0, r4, #11
 8001c6a:	1d23      	adds	r3, r4, #4
 8001c6c:	f020 0007 	bic.w	r0, r0, #7
 8001c70:	1ac3      	subs	r3, r0, r3
 8001c72:	d0d3      	beq.n	8001c1c <_malloc_r+0x20>
 8001c74:	425a      	negs	r2, r3
 8001c76:	50e2      	str	r2, [r4, r3]
 8001c78:	e7d0      	b.n	8001c1c <_malloc_r+0x20>
 8001c7a:	428c      	cmp	r4, r1
 8001c7c:	684b      	ldr	r3, [r1, #4]
 8001c7e:	bf16      	itet	ne
 8001c80:	6063      	strne	r3, [r4, #4]
 8001c82:	6013      	streq	r3, [r2, #0]
 8001c84:	460c      	movne	r4, r1
 8001c86:	e7eb      	b.n	8001c60 <_malloc_r+0x64>
 8001c88:	460c      	mov	r4, r1
 8001c8a:	6849      	ldr	r1, [r1, #4]
 8001c8c:	e7cc      	b.n	8001c28 <_malloc_r+0x2c>
 8001c8e:	1cc4      	adds	r4, r0, #3
 8001c90:	f024 0403 	bic.w	r4, r4, #3
 8001c94:	42a0      	cmp	r0, r4
 8001c96:	d005      	beq.n	8001ca4 <_malloc_r+0xa8>
 8001c98:	1a21      	subs	r1, r4, r0
 8001c9a:	4630      	mov	r0, r6
 8001c9c:	f000 face 	bl	800223c <_sbrk_r>
 8001ca0:	3001      	adds	r0, #1
 8001ca2:	d0cf      	beq.n	8001c44 <_malloc_r+0x48>
 8001ca4:	6025      	str	r5, [r4, #0]
 8001ca6:	e7db      	b.n	8001c60 <_malloc_r+0x64>
 8001ca8:	200000b4 	.word	0x200000b4
 8001cac:	200000b8 	.word	0x200000b8

08001cb0 <__sfputc_r>:
 8001cb0:	6893      	ldr	r3, [r2, #8]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	b410      	push	{r4}
 8001cb8:	6093      	str	r3, [r2, #8]
 8001cba:	da07      	bge.n	8001ccc <__sfputc_r+0x1c>
 8001cbc:	6994      	ldr	r4, [r2, #24]
 8001cbe:	42a3      	cmp	r3, r4
 8001cc0:	db01      	blt.n	8001cc6 <__sfputc_r+0x16>
 8001cc2:	290a      	cmp	r1, #10
 8001cc4:	d102      	bne.n	8001ccc <__sfputc_r+0x1c>
 8001cc6:	bc10      	pop	{r4}
 8001cc8:	f7ff bcac 	b.w	8001624 <__swbuf_r>
 8001ccc:	6813      	ldr	r3, [r2, #0]
 8001cce:	1c58      	adds	r0, r3, #1
 8001cd0:	6010      	str	r0, [r2, #0]
 8001cd2:	7019      	strb	r1, [r3, #0]
 8001cd4:	4608      	mov	r0, r1
 8001cd6:	bc10      	pop	{r4}
 8001cd8:	4770      	bx	lr

08001cda <__sfputs_r>:
 8001cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cdc:	4606      	mov	r6, r0
 8001cde:	460f      	mov	r7, r1
 8001ce0:	4614      	mov	r4, r2
 8001ce2:	18d5      	adds	r5, r2, r3
 8001ce4:	42ac      	cmp	r4, r5
 8001ce6:	d101      	bne.n	8001cec <__sfputs_r+0x12>
 8001ce8:	2000      	movs	r0, #0
 8001cea:	e007      	b.n	8001cfc <__sfputs_r+0x22>
 8001cec:	463a      	mov	r2, r7
 8001cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	f7ff ffdc 	bl	8001cb0 <__sfputc_r>
 8001cf8:	1c43      	adds	r3, r0, #1
 8001cfa:	d1f3      	bne.n	8001ce4 <__sfputs_r+0xa>
 8001cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d00 <_vfiprintf_r>:
 8001d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d04:	460c      	mov	r4, r1
 8001d06:	b09d      	sub	sp, #116	; 0x74
 8001d08:	4617      	mov	r7, r2
 8001d0a:	461d      	mov	r5, r3
 8001d0c:	4606      	mov	r6, r0
 8001d0e:	b118      	cbz	r0, 8001d18 <_vfiprintf_r+0x18>
 8001d10:	6983      	ldr	r3, [r0, #24]
 8001d12:	b90b      	cbnz	r3, 8001d18 <_vfiprintf_r+0x18>
 8001d14:	f7ff fe36 	bl	8001984 <__sinit>
 8001d18:	4b7c      	ldr	r3, [pc, #496]	; (8001f0c <_vfiprintf_r+0x20c>)
 8001d1a:	429c      	cmp	r4, r3
 8001d1c:	d158      	bne.n	8001dd0 <_vfiprintf_r+0xd0>
 8001d1e:	6874      	ldr	r4, [r6, #4]
 8001d20:	89a3      	ldrh	r3, [r4, #12]
 8001d22:	0718      	lsls	r0, r3, #28
 8001d24:	d55e      	bpl.n	8001de4 <_vfiprintf_r+0xe4>
 8001d26:	6923      	ldr	r3, [r4, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d05b      	beq.n	8001de4 <_vfiprintf_r+0xe4>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d30:	2320      	movs	r3, #32
 8001d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d36:	2330      	movs	r3, #48	; 0x30
 8001d38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d3c:	9503      	str	r5, [sp, #12]
 8001d3e:	f04f 0b01 	mov.w	fp, #1
 8001d42:	46b8      	mov	r8, r7
 8001d44:	4645      	mov	r5, r8
 8001d46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001d4a:	b10b      	cbz	r3, 8001d50 <_vfiprintf_r+0x50>
 8001d4c:	2b25      	cmp	r3, #37	; 0x25
 8001d4e:	d154      	bne.n	8001dfa <_vfiprintf_r+0xfa>
 8001d50:	ebb8 0a07 	subs.w	sl, r8, r7
 8001d54:	d00b      	beq.n	8001d6e <_vfiprintf_r+0x6e>
 8001d56:	4653      	mov	r3, sl
 8001d58:	463a      	mov	r2, r7
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	f7ff ffbc 	bl	8001cda <__sfputs_r>
 8001d62:	3001      	adds	r0, #1
 8001d64:	f000 80c2 	beq.w	8001eec <_vfiprintf_r+0x1ec>
 8001d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d6a:	4453      	add	r3, sl
 8001d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8001d6e:	f898 3000 	ldrb.w	r3, [r8]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80ba 	beq.w	8001eec <_vfiprintf_r+0x1ec>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001d82:	9304      	str	r3, [sp, #16]
 8001d84:	9307      	str	r3, [sp, #28]
 8001d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8001d8c:	46a8      	mov	r8, r5
 8001d8e:	2205      	movs	r2, #5
 8001d90:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001d94:	485e      	ldr	r0, [pc, #376]	; (8001f10 <_vfiprintf_r+0x210>)
 8001d96:	f7fe fa43 	bl	8000220 <memchr>
 8001d9a:	9b04      	ldr	r3, [sp, #16]
 8001d9c:	bb78      	cbnz	r0, 8001dfe <_vfiprintf_r+0xfe>
 8001d9e:	06d9      	lsls	r1, r3, #27
 8001da0:	bf44      	itt	mi
 8001da2:	2220      	movmi	r2, #32
 8001da4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001da8:	071a      	lsls	r2, r3, #28
 8001daa:	bf44      	itt	mi
 8001dac:	222b      	movmi	r2, #43	; 0x2b
 8001dae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001db2:	782a      	ldrb	r2, [r5, #0]
 8001db4:	2a2a      	cmp	r2, #42	; 0x2a
 8001db6:	d02a      	beq.n	8001e0e <_vfiprintf_r+0x10e>
 8001db8:	9a07      	ldr	r2, [sp, #28]
 8001dba:	46a8      	mov	r8, r5
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	250a      	movs	r5, #10
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001dc6:	3b30      	subs	r3, #48	; 0x30
 8001dc8:	2b09      	cmp	r3, #9
 8001dca:	d969      	bls.n	8001ea0 <_vfiprintf_r+0x1a0>
 8001dcc:	b360      	cbz	r0, 8001e28 <_vfiprintf_r+0x128>
 8001dce:	e024      	b.n	8001e1a <_vfiprintf_r+0x11a>
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <_vfiprintf_r+0x214>)
 8001dd2:	429c      	cmp	r4, r3
 8001dd4:	d101      	bne.n	8001dda <_vfiprintf_r+0xda>
 8001dd6:	68b4      	ldr	r4, [r6, #8]
 8001dd8:	e7a2      	b.n	8001d20 <_vfiprintf_r+0x20>
 8001dda:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <_vfiprintf_r+0x218>)
 8001ddc:	429c      	cmp	r4, r3
 8001dde:	bf08      	it	eq
 8001de0:	68f4      	ldreq	r4, [r6, #12]
 8001de2:	e79d      	b.n	8001d20 <_vfiprintf_r+0x20>
 8001de4:	4621      	mov	r1, r4
 8001de6:	4630      	mov	r0, r6
 8001de8:	f7ff fc6e 	bl	80016c8 <__swsetup_r>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d09d      	beq.n	8001d2c <_vfiprintf_r+0x2c>
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	b01d      	add	sp, #116	; 0x74
 8001df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dfa:	46a8      	mov	r8, r5
 8001dfc:	e7a2      	b.n	8001d44 <_vfiprintf_r+0x44>
 8001dfe:	4a44      	ldr	r2, [pc, #272]	; (8001f10 <_vfiprintf_r+0x210>)
 8001e00:	1a80      	subs	r0, r0, r2
 8001e02:	fa0b f000 	lsl.w	r0, fp, r0
 8001e06:	4318      	orrs	r0, r3
 8001e08:	9004      	str	r0, [sp, #16]
 8001e0a:	4645      	mov	r5, r8
 8001e0c:	e7be      	b.n	8001d8c <_vfiprintf_r+0x8c>
 8001e0e:	9a03      	ldr	r2, [sp, #12]
 8001e10:	1d11      	adds	r1, r2, #4
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	9103      	str	r1, [sp, #12]
 8001e16:	2a00      	cmp	r2, #0
 8001e18:	db01      	blt.n	8001e1e <_vfiprintf_r+0x11e>
 8001e1a:	9207      	str	r2, [sp, #28]
 8001e1c:	e004      	b.n	8001e28 <_vfiprintf_r+0x128>
 8001e1e:	4252      	negs	r2, r2
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	9207      	str	r2, [sp, #28]
 8001e26:	9304      	str	r3, [sp, #16]
 8001e28:	f898 3000 	ldrb.w	r3, [r8]
 8001e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8001e2e:	d10e      	bne.n	8001e4e <_vfiprintf_r+0x14e>
 8001e30:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001e34:	2b2a      	cmp	r3, #42	; 0x2a
 8001e36:	d138      	bne.n	8001eaa <_vfiprintf_r+0x1aa>
 8001e38:	9b03      	ldr	r3, [sp, #12]
 8001e3a:	1d1a      	adds	r2, r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	9203      	str	r2, [sp, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bfb8      	it	lt
 8001e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e48:	f108 0802 	add.w	r8, r8, #2
 8001e4c:	9305      	str	r3, [sp, #20]
 8001e4e:	4d33      	ldr	r5, [pc, #204]	; (8001f1c <_vfiprintf_r+0x21c>)
 8001e50:	f898 1000 	ldrb.w	r1, [r8]
 8001e54:	2203      	movs	r2, #3
 8001e56:	4628      	mov	r0, r5
 8001e58:	f7fe f9e2 	bl	8000220 <memchr>
 8001e5c:	b140      	cbz	r0, 8001e70 <_vfiprintf_r+0x170>
 8001e5e:	2340      	movs	r3, #64	; 0x40
 8001e60:	1b40      	subs	r0, r0, r5
 8001e62:	fa03 f000 	lsl.w	r0, r3, r0
 8001e66:	9b04      	ldr	r3, [sp, #16]
 8001e68:	4303      	orrs	r3, r0
 8001e6a:	f108 0801 	add.w	r8, r8, #1
 8001e6e:	9304      	str	r3, [sp, #16]
 8001e70:	f898 1000 	ldrb.w	r1, [r8]
 8001e74:	482a      	ldr	r0, [pc, #168]	; (8001f20 <_vfiprintf_r+0x220>)
 8001e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e7a:	2206      	movs	r2, #6
 8001e7c:	f108 0701 	add.w	r7, r8, #1
 8001e80:	f7fe f9ce 	bl	8000220 <memchr>
 8001e84:	2800      	cmp	r0, #0
 8001e86:	d037      	beq.n	8001ef8 <_vfiprintf_r+0x1f8>
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <_vfiprintf_r+0x224>)
 8001e8a:	bb1b      	cbnz	r3, 8001ed4 <_vfiprintf_r+0x1d4>
 8001e8c:	9b03      	ldr	r3, [sp, #12]
 8001e8e:	3307      	adds	r3, #7
 8001e90:	f023 0307 	bic.w	r3, r3, #7
 8001e94:	3308      	adds	r3, #8
 8001e96:	9303      	str	r3, [sp, #12]
 8001e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e9a:	444b      	add	r3, r9
 8001e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8001e9e:	e750      	b.n	8001d42 <_vfiprintf_r+0x42>
 8001ea0:	fb05 3202 	mla	r2, r5, r2, r3
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	4688      	mov	r8, r1
 8001ea8:	e78a      	b.n	8001dc0 <_vfiprintf_r+0xc0>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f108 0801 	add.w	r8, r8, #1
 8001eb0:	9305      	str	r3, [sp, #20]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	250a      	movs	r5, #10
 8001eb6:	4640      	mov	r0, r8
 8001eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ebc:	3a30      	subs	r2, #48	; 0x30
 8001ebe:	2a09      	cmp	r2, #9
 8001ec0:	d903      	bls.n	8001eca <_vfiprintf_r+0x1ca>
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0c3      	beq.n	8001e4e <_vfiprintf_r+0x14e>
 8001ec6:	9105      	str	r1, [sp, #20]
 8001ec8:	e7c1      	b.n	8001e4e <_vfiprintf_r+0x14e>
 8001eca:	fb05 2101 	mla	r1, r5, r1, r2
 8001ece:	2301      	movs	r3, #1
 8001ed0:	4680      	mov	r8, r0
 8001ed2:	e7f0      	b.n	8001eb6 <_vfiprintf_r+0x1b6>
 8001ed4:	ab03      	add	r3, sp, #12
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	4622      	mov	r2, r4
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <_vfiprintf_r+0x228>)
 8001edc:	a904      	add	r1, sp, #16
 8001ede:	4630      	mov	r0, r6
 8001ee0:	f3af 8000 	nop.w
 8001ee4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001ee8:	4681      	mov	r9, r0
 8001eea:	d1d5      	bne.n	8001e98 <_vfiprintf_r+0x198>
 8001eec:	89a3      	ldrh	r3, [r4, #12]
 8001eee:	065b      	lsls	r3, r3, #25
 8001ef0:	f53f af7e 	bmi.w	8001df0 <_vfiprintf_r+0xf0>
 8001ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ef6:	e77d      	b.n	8001df4 <_vfiprintf_r+0xf4>
 8001ef8:	ab03      	add	r3, sp, #12
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	4622      	mov	r2, r4
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <_vfiprintf_r+0x228>)
 8001f00:	a904      	add	r1, sp, #16
 8001f02:	4630      	mov	r0, r6
 8001f04:	f000 f888 	bl	8002018 <_printf_i>
 8001f08:	e7ec      	b.n	8001ee4 <_vfiprintf_r+0x1e4>
 8001f0a:	bf00      	nop
 8001f0c:	08002a18 	.word	0x08002a18
 8001f10:	08002a58 	.word	0x08002a58
 8001f14:	08002a38 	.word	0x08002a38
 8001f18:	080029f8 	.word	0x080029f8
 8001f1c:	08002a5e 	.word	0x08002a5e
 8001f20:	08002a62 	.word	0x08002a62
 8001f24:	00000000 	.word	0x00000000
 8001f28:	08001cdb 	.word	0x08001cdb

08001f2c <_printf_common>:
 8001f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f30:	4691      	mov	r9, r2
 8001f32:	461f      	mov	r7, r3
 8001f34:	688a      	ldr	r2, [r1, #8]
 8001f36:	690b      	ldr	r3, [r1, #16]
 8001f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	bfb8      	it	lt
 8001f40:	4613      	movlt	r3, r2
 8001f42:	f8c9 3000 	str.w	r3, [r9]
 8001f46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f4a:	4606      	mov	r6, r0
 8001f4c:	460c      	mov	r4, r1
 8001f4e:	b112      	cbz	r2, 8001f56 <_printf_common+0x2a>
 8001f50:	3301      	adds	r3, #1
 8001f52:	f8c9 3000 	str.w	r3, [r9]
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	0699      	lsls	r1, r3, #26
 8001f5a:	bf42      	ittt	mi
 8001f5c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001f60:	3302      	addmi	r3, #2
 8001f62:	f8c9 3000 	strmi.w	r3, [r9]
 8001f66:	6825      	ldr	r5, [r4, #0]
 8001f68:	f015 0506 	ands.w	r5, r5, #6
 8001f6c:	d107      	bne.n	8001f7e <_printf_common+0x52>
 8001f6e:	f104 0a19 	add.w	sl, r4, #25
 8001f72:	68e3      	ldr	r3, [r4, #12]
 8001f74:	f8d9 2000 	ldr.w	r2, [r9]
 8001f78:	1a9b      	subs	r3, r3, r2
 8001f7a:	42ab      	cmp	r3, r5
 8001f7c:	dc28      	bgt.n	8001fd0 <_printf_common+0xa4>
 8001f7e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001f82:	6822      	ldr	r2, [r4, #0]
 8001f84:	3300      	adds	r3, #0
 8001f86:	bf18      	it	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	0692      	lsls	r2, r2, #26
 8001f8c:	d42d      	bmi.n	8001fea <_printf_common+0xbe>
 8001f8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001f92:	4639      	mov	r1, r7
 8001f94:	4630      	mov	r0, r6
 8001f96:	47c0      	blx	r8
 8001f98:	3001      	adds	r0, #1
 8001f9a:	d020      	beq.n	8001fde <_printf_common+0xb2>
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	68e5      	ldr	r5, [r4, #12]
 8001fa0:	f8d9 2000 	ldr.w	r2, [r9]
 8001fa4:	f003 0306 	and.w	r3, r3, #6
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	bf08      	it	eq
 8001fac:	1aad      	subeq	r5, r5, r2
 8001fae:	68a3      	ldr	r3, [r4, #8]
 8001fb0:	6922      	ldr	r2, [r4, #16]
 8001fb2:	bf0c      	ite	eq
 8001fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fb8:	2500      	movne	r5, #0
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	bfc4      	itt	gt
 8001fbe:	1a9b      	subgt	r3, r3, r2
 8001fc0:	18ed      	addgt	r5, r5, r3
 8001fc2:	f04f 0900 	mov.w	r9, #0
 8001fc6:	341a      	adds	r4, #26
 8001fc8:	454d      	cmp	r5, r9
 8001fca:	d11a      	bne.n	8002002 <_printf_common+0xd6>
 8001fcc:	2000      	movs	r0, #0
 8001fce:	e008      	b.n	8001fe2 <_printf_common+0xb6>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	4639      	mov	r1, r7
 8001fd6:	4630      	mov	r0, r6
 8001fd8:	47c0      	blx	r8
 8001fda:	3001      	adds	r0, #1
 8001fdc:	d103      	bne.n	8001fe6 <_printf_common+0xba>
 8001fde:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fe6:	3501      	adds	r5, #1
 8001fe8:	e7c3      	b.n	8001f72 <_printf_common+0x46>
 8001fea:	18e1      	adds	r1, r4, r3
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	2030      	movs	r0, #48	; 0x30
 8001ff0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001ff4:	4422      	add	r2, r4
 8001ff6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ffa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ffe:	3302      	adds	r3, #2
 8002000:	e7c5      	b.n	8001f8e <_printf_common+0x62>
 8002002:	2301      	movs	r3, #1
 8002004:	4622      	mov	r2, r4
 8002006:	4639      	mov	r1, r7
 8002008:	4630      	mov	r0, r6
 800200a:	47c0      	blx	r8
 800200c:	3001      	adds	r0, #1
 800200e:	d0e6      	beq.n	8001fde <_printf_common+0xb2>
 8002010:	f109 0901 	add.w	r9, r9, #1
 8002014:	e7d8      	b.n	8001fc8 <_printf_common+0x9c>
	...

08002018 <_printf_i>:
 8002018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800201c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002020:	460c      	mov	r4, r1
 8002022:	7e09      	ldrb	r1, [r1, #24]
 8002024:	b085      	sub	sp, #20
 8002026:	296e      	cmp	r1, #110	; 0x6e
 8002028:	4617      	mov	r7, r2
 800202a:	4606      	mov	r6, r0
 800202c:	4698      	mov	r8, r3
 800202e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002030:	f000 80b3 	beq.w	800219a <_printf_i+0x182>
 8002034:	d822      	bhi.n	800207c <_printf_i+0x64>
 8002036:	2963      	cmp	r1, #99	; 0x63
 8002038:	d036      	beq.n	80020a8 <_printf_i+0x90>
 800203a:	d80a      	bhi.n	8002052 <_printf_i+0x3a>
 800203c:	2900      	cmp	r1, #0
 800203e:	f000 80b9 	beq.w	80021b4 <_printf_i+0x19c>
 8002042:	2958      	cmp	r1, #88	; 0x58
 8002044:	f000 8083 	beq.w	800214e <_printf_i+0x136>
 8002048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800204c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002050:	e032      	b.n	80020b8 <_printf_i+0xa0>
 8002052:	2964      	cmp	r1, #100	; 0x64
 8002054:	d001      	beq.n	800205a <_printf_i+0x42>
 8002056:	2969      	cmp	r1, #105	; 0x69
 8002058:	d1f6      	bne.n	8002048 <_printf_i+0x30>
 800205a:	6820      	ldr	r0, [r4, #0]
 800205c:	6813      	ldr	r3, [r2, #0]
 800205e:	0605      	lsls	r5, r0, #24
 8002060:	f103 0104 	add.w	r1, r3, #4
 8002064:	d52a      	bpl.n	80020bc <_printf_i+0xa4>
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6011      	str	r1, [r2, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	da03      	bge.n	8002076 <_printf_i+0x5e>
 800206e:	222d      	movs	r2, #45	; 0x2d
 8002070:	425b      	negs	r3, r3
 8002072:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002076:	486f      	ldr	r0, [pc, #444]	; (8002234 <_printf_i+0x21c>)
 8002078:	220a      	movs	r2, #10
 800207a:	e039      	b.n	80020f0 <_printf_i+0xd8>
 800207c:	2973      	cmp	r1, #115	; 0x73
 800207e:	f000 809d 	beq.w	80021bc <_printf_i+0x1a4>
 8002082:	d808      	bhi.n	8002096 <_printf_i+0x7e>
 8002084:	296f      	cmp	r1, #111	; 0x6f
 8002086:	d020      	beq.n	80020ca <_printf_i+0xb2>
 8002088:	2970      	cmp	r1, #112	; 0x70
 800208a:	d1dd      	bne.n	8002048 <_printf_i+0x30>
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	f043 0320 	orr.w	r3, r3, #32
 8002092:	6023      	str	r3, [r4, #0]
 8002094:	e003      	b.n	800209e <_printf_i+0x86>
 8002096:	2975      	cmp	r1, #117	; 0x75
 8002098:	d017      	beq.n	80020ca <_printf_i+0xb2>
 800209a:	2978      	cmp	r1, #120	; 0x78
 800209c:	d1d4      	bne.n	8002048 <_printf_i+0x30>
 800209e:	2378      	movs	r3, #120	; 0x78
 80020a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80020a4:	4864      	ldr	r0, [pc, #400]	; (8002238 <_printf_i+0x220>)
 80020a6:	e055      	b.n	8002154 <_printf_i+0x13c>
 80020a8:	6813      	ldr	r3, [r2, #0]
 80020aa:	1d19      	adds	r1, r3, #4
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6011      	str	r1, [r2, #0]
 80020b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020b8:	2301      	movs	r3, #1
 80020ba:	e08c      	b.n	80021d6 <_printf_i+0x1be>
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6011      	str	r1, [r2, #0]
 80020c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020c4:	bf18      	it	ne
 80020c6:	b21b      	sxthne	r3, r3
 80020c8:	e7cf      	b.n	800206a <_printf_i+0x52>
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	6825      	ldr	r5, [r4, #0]
 80020ce:	1d18      	adds	r0, r3, #4
 80020d0:	6010      	str	r0, [r2, #0]
 80020d2:	0628      	lsls	r0, r5, #24
 80020d4:	d501      	bpl.n	80020da <_printf_i+0xc2>
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	e002      	b.n	80020e0 <_printf_i+0xc8>
 80020da:	0668      	lsls	r0, r5, #25
 80020dc:	d5fb      	bpl.n	80020d6 <_printf_i+0xbe>
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	4854      	ldr	r0, [pc, #336]	; (8002234 <_printf_i+0x21c>)
 80020e2:	296f      	cmp	r1, #111	; 0x6f
 80020e4:	bf14      	ite	ne
 80020e6:	220a      	movne	r2, #10
 80020e8:	2208      	moveq	r2, #8
 80020ea:	2100      	movs	r1, #0
 80020ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80020f0:	6865      	ldr	r5, [r4, #4]
 80020f2:	60a5      	str	r5, [r4, #8]
 80020f4:	2d00      	cmp	r5, #0
 80020f6:	f2c0 8095 	blt.w	8002224 <_printf_i+0x20c>
 80020fa:	6821      	ldr	r1, [r4, #0]
 80020fc:	f021 0104 	bic.w	r1, r1, #4
 8002100:	6021      	str	r1, [r4, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d13d      	bne.n	8002182 <_printf_i+0x16a>
 8002106:	2d00      	cmp	r5, #0
 8002108:	f040 808e 	bne.w	8002228 <_printf_i+0x210>
 800210c:	4665      	mov	r5, ip
 800210e:	2a08      	cmp	r2, #8
 8002110:	d10b      	bne.n	800212a <_printf_i+0x112>
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	07db      	lsls	r3, r3, #31
 8002116:	d508      	bpl.n	800212a <_printf_i+0x112>
 8002118:	6923      	ldr	r3, [r4, #16]
 800211a:	6862      	ldr	r2, [r4, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	bfde      	ittt	le
 8002120:	2330      	movle	r3, #48	; 0x30
 8002122:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002126:	f105 35ff 	addle.w	r5, r5, #4294967295
 800212a:	ebac 0305 	sub.w	r3, ip, r5
 800212e:	6123      	str	r3, [r4, #16]
 8002130:	f8cd 8000 	str.w	r8, [sp]
 8002134:	463b      	mov	r3, r7
 8002136:	aa03      	add	r2, sp, #12
 8002138:	4621      	mov	r1, r4
 800213a:	4630      	mov	r0, r6
 800213c:	f7ff fef6 	bl	8001f2c <_printf_common>
 8002140:	3001      	adds	r0, #1
 8002142:	d14d      	bne.n	80021e0 <_printf_i+0x1c8>
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	b005      	add	sp, #20
 800214a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800214e:	4839      	ldr	r0, [pc, #228]	; (8002234 <_printf_i+0x21c>)
 8002150:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002154:	6813      	ldr	r3, [r2, #0]
 8002156:	6821      	ldr	r1, [r4, #0]
 8002158:	1d1d      	adds	r5, r3, #4
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6015      	str	r5, [r2, #0]
 800215e:	060a      	lsls	r2, r1, #24
 8002160:	d50b      	bpl.n	800217a <_printf_i+0x162>
 8002162:	07ca      	lsls	r2, r1, #31
 8002164:	bf44      	itt	mi
 8002166:	f041 0120 	orrmi.w	r1, r1, #32
 800216a:	6021      	strmi	r1, [r4, #0]
 800216c:	b91b      	cbnz	r3, 8002176 <_printf_i+0x15e>
 800216e:	6822      	ldr	r2, [r4, #0]
 8002170:	f022 0220 	bic.w	r2, r2, #32
 8002174:	6022      	str	r2, [r4, #0]
 8002176:	2210      	movs	r2, #16
 8002178:	e7b7      	b.n	80020ea <_printf_i+0xd2>
 800217a:	064d      	lsls	r5, r1, #25
 800217c:	bf48      	it	mi
 800217e:	b29b      	uxthmi	r3, r3
 8002180:	e7ef      	b.n	8002162 <_printf_i+0x14a>
 8002182:	4665      	mov	r5, ip
 8002184:	fbb3 f1f2 	udiv	r1, r3, r2
 8002188:	fb02 3311 	mls	r3, r2, r1, r3
 800218c:	5cc3      	ldrb	r3, [r0, r3]
 800218e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002192:	460b      	mov	r3, r1
 8002194:	2900      	cmp	r1, #0
 8002196:	d1f5      	bne.n	8002184 <_printf_i+0x16c>
 8002198:	e7b9      	b.n	800210e <_printf_i+0xf6>
 800219a:	6813      	ldr	r3, [r2, #0]
 800219c:	6825      	ldr	r5, [r4, #0]
 800219e:	6961      	ldr	r1, [r4, #20]
 80021a0:	1d18      	adds	r0, r3, #4
 80021a2:	6010      	str	r0, [r2, #0]
 80021a4:	0628      	lsls	r0, r5, #24
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	d501      	bpl.n	80021ae <_printf_i+0x196>
 80021aa:	6019      	str	r1, [r3, #0]
 80021ac:	e002      	b.n	80021b4 <_printf_i+0x19c>
 80021ae:	066a      	lsls	r2, r5, #25
 80021b0:	d5fb      	bpl.n	80021aa <_printf_i+0x192>
 80021b2:	8019      	strh	r1, [r3, #0]
 80021b4:	2300      	movs	r3, #0
 80021b6:	6123      	str	r3, [r4, #16]
 80021b8:	4665      	mov	r5, ip
 80021ba:	e7b9      	b.n	8002130 <_printf_i+0x118>
 80021bc:	6813      	ldr	r3, [r2, #0]
 80021be:	1d19      	adds	r1, r3, #4
 80021c0:	6011      	str	r1, [r2, #0]
 80021c2:	681d      	ldr	r5, [r3, #0]
 80021c4:	6862      	ldr	r2, [r4, #4]
 80021c6:	2100      	movs	r1, #0
 80021c8:	4628      	mov	r0, r5
 80021ca:	f7fe f829 	bl	8000220 <memchr>
 80021ce:	b108      	cbz	r0, 80021d4 <_printf_i+0x1bc>
 80021d0:	1b40      	subs	r0, r0, r5
 80021d2:	6060      	str	r0, [r4, #4]
 80021d4:	6863      	ldr	r3, [r4, #4]
 80021d6:	6123      	str	r3, [r4, #16]
 80021d8:	2300      	movs	r3, #0
 80021da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021de:	e7a7      	b.n	8002130 <_printf_i+0x118>
 80021e0:	6923      	ldr	r3, [r4, #16]
 80021e2:	462a      	mov	r2, r5
 80021e4:	4639      	mov	r1, r7
 80021e6:	4630      	mov	r0, r6
 80021e8:	47c0      	blx	r8
 80021ea:	3001      	adds	r0, #1
 80021ec:	d0aa      	beq.n	8002144 <_printf_i+0x12c>
 80021ee:	6823      	ldr	r3, [r4, #0]
 80021f0:	079b      	lsls	r3, r3, #30
 80021f2:	d413      	bmi.n	800221c <_printf_i+0x204>
 80021f4:	68e0      	ldr	r0, [r4, #12]
 80021f6:	9b03      	ldr	r3, [sp, #12]
 80021f8:	4298      	cmp	r0, r3
 80021fa:	bfb8      	it	lt
 80021fc:	4618      	movlt	r0, r3
 80021fe:	e7a3      	b.n	8002148 <_printf_i+0x130>
 8002200:	2301      	movs	r3, #1
 8002202:	464a      	mov	r2, r9
 8002204:	4639      	mov	r1, r7
 8002206:	4630      	mov	r0, r6
 8002208:	47c0      	blx	r8
 800220a:	3001      	adds	r0, #1
 800220c:	d09a      	beq.n	8002144 <_printf_i+0x12c>
 800220e:	3501      	adds	r5, #1
 8002210:	68e3      	ldr	r3, [r4, #12]
 8002212:	9a03      	ldr	r2, [sp, #12]
 8002214:	1a9b      	subs	r3, r3, r2
 8002216:	42ab      	cmp	r3, r5
 8002218:	dcf2      	bgt.n	8002200 <_printf_i+0x1e8>
 800221a:	e7eb      	b.n	80021f4 <_printf_i+0x1dc>
 800221c:	2500      	movs	r5, #0
 800221e:	f104 0919 	add.w	r9, r4, #25
 8002222:	e7f5      	b.n	8002210 <_printf_i+0x1f8>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ac      	bne.n	8002182 <_printf_i+0x16a>
 8002228:	7803      	ldrb	r3, [r0, #0]
 800222a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800222e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002232:	e76c      	b.n	800210e <_printf_i+0xf6>
 8002234:	08002a69 	.word	0x08002a69
 8002238:	08002a7a 	.word	0x08002a7a

0800223c <_sbrk_r>:
 800223c:	b538      	push	{r3, r4, r5, lr}
 800223e:	4c06      	ldr	r4, [pc, #24]	; (8002258 <_sbrk_r+0x1c>)
 8002240:	2300      	movs	r3, #0
 8002242:	4605      	mov	r5, r0
 8002244:	4608      	mov	r0, r1
 8002246:	6023      	str	r3, [r4, #0]
 8002248:	f000 f9bc 	bl	80025c4 <_sbrk>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d102      	bne.n	8002256 <_sbrk_r+0x1a>
 8002250:	6823      	ldr	r3, [r4, #0]
 8002252:	b103      	cbz	r3, 8002256 <_sbrk_r+0x1a>
 8002254:	602b      	str	r3, [r5, #0]
 8002256:	bd38      	pop	{r3, r4, r5, pc}
 8002258:	20000590 	.word	0x20000590

0800225c <__sread>:
 800225c:	b510      	push	{r4, lr}
 800225e:	460c      	mov	r4, r1
 8002260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002264:	f000 f896 	bl	8002394 <_read_r>
 8002268:	2800      	cmp	r0, #0
 800226a:	bfab      	itete	ge
 800226c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800226e:	89a3      	ldrhlt	r3, [r4, #12]
 8002270:	181b      	addge	r3, r3, r0
 8002272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002276:	bfac      	ite	ge
 8002278:	6563      	strge	r3, [r4, #84]	; 0x54
 800227a:	81a3      	strhlt	r3, [r4, #12]
 800227c:	bd10      	pop	{r4, pc}

0800227e <__swrite>:
 800227e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002282:	461f      	mov	r7, r3
 8002284:	898b      	ldrh	r3, [r1, #12]
 8002286:	05db      	lsls	r3, r3, #23
 8002288:	4605      	mov	r5, r0
 800228a:	460c      	mov	r4, r1
 800228c:	4616      	mov	r6, r2
 800228e:	d505      	bpl.n	800229c <__swrite+0x1e>
 8002290:	2302      	movs	r3, #2
 8002292:	2200      	movs	r2, #0
 8002294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002298:	f000 f868 	bl	800236c <_lseek_r>
 800229c:	89a3      	ldrh	r3, [r4, #12]
 800229e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022a6:	81a3      	strh	r3, [r4, #12]
 80022a8:	4632      	mov	r2, r6
 80022aa:	463b      	mov	r3, r7
 80022ac:	4628      	mov	r0, r5
 80022ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022b2:	f000 b817 	b.w	80022e4 <_write_r>

080022b6 <__sseek>:
 80022b6:	b510      	push	{r4, lr}
 80022b8:	460c      	mov	r4, r1
 80022ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022be:	f000 f855 	bl	800236c <_lseek_r>
 80022c2:	1c43      	adds	r3, r0, #1
 80022c4:	89a3      	ldrh	r3, [r4, #12]
 80022c6:	bf15      	itete	ne
 80022c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80022ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80022ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80022d2:	81a3      	strheq	r3, [r4, #12]
 80022d4:	bf18      	it	ne
 80022d6:	81a3      	strhne	r3, [r4, #12]
 80022d8:	bd10      	pop	{r4, pc}

080022da <__sclose>:
 80022da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022de:	f000 b813 	b.w	8002308 <_close_r>
	...

080022e4 <_write_r>:
 80022e4:	b538      	push	{r3, r4, r5, lr}
 80022e6:	4c07      	ldr	r4, [pc, #28]	; (8002304 <_write_r+0x20>)
 80022e8:	4605      	mov	r5, r0
 80022ea:	4608      	mov	r0, r1
 80022ec:	4611      	mov	r1, r2
 80022ee:	2200      	movs	r2, #0
 80022f0:	6022      	str	r2, [r4, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f000 f911 	bl	800251a <_write>
 80022f8:	1c43      	adds	r3, r0, #1
 80022fa:	d102      	bne.n	8002302 <_write_r+0x1e>
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	b103      	cbz	r3, 8002302 <_write_r+0x1e>
 8002300:	602b      	str	r3, [r5, #0]
 8002302:	bd38      	pop	{r3, r4, r5, pc}
 8002304:	20000590 	.word	0x20000590

08002308 <_close_r>:
 8002308:	b538      	push	{r3, r4, r5, lr}
 800230a:	4c06      	ldr	r4, [pc, #24]	; (8002324 <_close_r+0x1c>)
 800230c:	2300      	movs	r3, #0
 800230e:	4605      	mov	r5, r0
 8002310:	4608      	mov	r0, r1
 8002312:	6023      	str	r3, [r4, #0]
 8002314:	f000 f930 	bl	8002578 <_close>
 8002318:	1c43      	adds	r3, r0, #1
 800231a:	d102      	bne.n	8002322 <_close_r+0x1a>
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	b103      	cbz	r3, 8002322 <_close_r+0x1a>
 8002320:	602b      	str	r3, [r5, #0]
 8002322:	bd38      	pop	{r3, r4, r5, pc}
 8002324:	20000590 	.word	0x20000590

08002328 <_fstat_r>:
 8002328:	b538      	push	{r3, r4, r5, lr}
 800232a:	4c07      	ldr	r4, [pc, #28]	; (8002348 <_fstat_r+0x20>)
 800232c:	2300      	movs	r3, #0
 800232e:	4605      	mov	r5, r0
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	f000 f98a 	bl	800264e <_fstat>
 800233a:	1c43      	adds	r3, r0, #1
 800233c:	d102      	bne.n	8002344 <_fstat_r+0x1c>
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	b103      	cbz	r3, 8002344 <_fstat_r+0x1c>
 8002342:	602b      	str	r3, [r5, #0]
 8002344:	bd38      	pop	{r3, r4, r5, pc}
 8002346:	bf00      	nop
 8002348:	20000590 	.word	0x20000590

0800234c <_isatty_r>:
 800234c:	b538      	push	{r3, r4, r5, lr}
 800234e:	4c06      	ldr	r4, [pc, #24]	; (8002368 <_isatty_r+0x1c>)
 8002350:	2300      	movs	r3, #0
 8002352:	4605      	mov	r5, r0
 8002354:	4608      	mov	r0, r1
 8002356:	6023      	str	r3, [r4, #0]
 8002358:	f000 fade 	bl	8002918 <_isatty>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d102      	bne.n	8002366 <_isatty_r+0x1a>
 8002360:	6823      	ldr	r3, [r4, #0]
 8002362:	b103      	cbz	r3, 8002366 <_isatty_r+0x1a>
 8002364:	602b      	str	r3, [r5, #0]
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	20000590 	.word	0x20000590

0800236c <_lseek_r>:
 800236c:	b538      	push	{r3, r4, r5, lr}
 800236e:	4c07      	ldr	r4, [pc, #28]	; (800238c <_lseek_r+0x20>)
 8002370:	4605      	mov	r5, r0
 8002372:	4608      	mov	r0, r1
 8002374:	4611      	mov	r1, r2
 8002376:	2200      	movs	r2, #0
 8002378:	6022      	str	r2, [r4, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	f000 f8bb 	bl	80024f6 <_lseek>
 8002380:	1c43      	adds	r3, r0, #1
 8002382:	d102      	bne.n	800238a <_lseek_r+0x1e>
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	b103      	cbz	r3, 800238a <_lseek_r+0x1e>
 8002388:	602b      	str	r3, [r5, #0]
 800238a:	bd38      	pop	{r3, r4, r5, pc}
 800238c:	20000590 	.word	0x20000590

08002390 <__malloc_lock>:
 8002390:	4770      	bx	lr

08002392 <__malloc_unlock>:
 8002392:	4770      	bx	lr

08002394 <_read_r>:
 8002394:	b538      	push	{r3, r4, r5, lr}
 8002396:	4c07      	ldr	r4, [pc, #28]	; (80023b4 <_read_r+0x20>)
 8002398:	4605      	mov	r5, r0
 800239a:	4608      	mov	r0, r1
 800239c:	4611      	mov	r1, r2
 800239e:	2200      	movs	r2, #0
 80023a0:	6022      	str	r2, [r4, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f000 f850 	bl	8002448 <_read>
 80023a8:	1c43      	adds	r3, r0, #1
 80023aa:	d102      	bne.n	80023b2 <_read_r+0x1e>
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	b103      	cbz	r3, 80023b2 <_read_r+0x1e>
 80023b0:	602b      	str	r3, [r5, #0]
 80023b2:	bd38      	pop	{r3, r4, r5, pc}
 80023b4:	20000590 	.word	0x20000590

080023b8 <findslot>:
 80023b8:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <findslot+0x2c>)
 80023ba:	b510      	push	{r4, lr}
 80023bc:	4604      	mov	r4, r0
 80023be:	6818      	ldr	r0, [r3, #0]
 80023c0:	b118      	cbz	r0, 80023ca <findslot+0x12>
 80023c2:	6983      	ldr	r3, [r0, #24]
 80023c4:	b90b      	cbnz	r3, 80023ca <findslot+0x12>
 80023c6:	f7ff fadd 	bl	8001984 <__sinit>
 80023ca:	2c13      	cmp	r4, #19
 80023cc:	d807      	bhi.n	80023de <findslot+0x26>
 80023ce:	4806      	ldr	r0, [pc, #24]	; (80023e8 <findslot+0x30>)
 80023d0:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 80023d4:	3301      	adds	r3, #1
 80023d6:	d002      	beq.n	80023de <findslot+0x26>
 80023d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80023dc:	bd10      	pop	{r4, pc}
 80023de:	2000      	movs	r0, #0
 80023e0:	e7fc      	b.n	80023dc <findslot+0x24>
 80023e2:	bf00      	nop
 80023e4:	20000024 	.word	0x20000024
 80023e8:	200000cc 	.word	0x200000cc

080023ec <checkerror>:
 80023ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ee:	1c43      	adds	r3, r0, #1
 80023f0:	4605      	mov	r5, r0
 80023f2:	d109      	bne.n	8002408 <checkerror+0x1c>
 80023f4:	f000 faac 	bl	8002950 <__errno>
 80023f8:	2413      	movs	r4, #19
 80023fa:	4606      	mov	r6, r0
 80023fc:	2700      	movs	r7, #0
 80023fe:	4620      	mov	r0, r4
 8002400:	4639      	mov	r1, r7
 8002402:	beab      	bkpt	0x00ab
 8002404:	4604      	mov	r4, r0
 8002406:	6034      	str	r4, [r6, #0]
 8002408:	4628      	mov	r0, r5
 800240a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800240c <error>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	4605      	mov	r5, r0
 8002410:	f000 fa9e 	bl	8002950 <__errno>
 8002414:	2413      	movs	r4, #19
 8002416:	4606      	mov	r6, r0
 8002418:	2700      	movs	r7, #0
 800241a:	4620      	mov	r0, r4
 800241c:	4639      	mov	r1, r7
 800241e:	beab      	bkpt	0x00ab
 8002420:	4604      	mov	r4, r0
 8002422:	6034      	str	r4, [r6, #0]
 8002424:	4628      	mov	r0, r5
 8002426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002428 <_swiread>:
 8002428:	b530      	push	{r4, r5, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002430:	9203      	str	r2, [sp, #12]
 8002432:	2406      	movs	r4, #6
 8002434:	ad01      	add	r5, sp, #4
 8002436:	4620      	mov	r0, r4
 8002438:	4629      	mov	r1, r5
 800243a:	beab      	bkpt	0x00ab
 800243c:	4604      	mov	r4, r0
 800243e:	4620      	mov	r0, r4
 8002440:	f7ff ffd4 	bl	80023ec <checkerror>
 8002444:	b005      	add	sp, #20
 8002446:	bd30      	pop	{r4, r5, pc}

08002448 <_read>:
 8002448:	b570      	push	{r4, r5, r6, lr}
 800244a:	460e      	mov	r6, r1
 800244c:	4615      	mov	r5, r2
 800244e:	f7ff ffb3 	bl	80023b8 <findslot>
 8002452:	4604      	mov	r4, r0
 8002454:	b930      	cbnz	r0, 8002464 <_read+0x1c>
 8002456:	f000 fa7b 	bl	8002950 <__errno>
 800245a:	2309      	movs	r3, #9
 800245c:	6003      	str	r3, [r0, #0]
 800245e:	f04f 30ff 	mov.w	r0, #4294967295
 8002462:	bd70      	pop	{r4, r5, r6, pc}
 8002464:	462a      	mov	r2, r5
 8002466:	4631      	mov	r1, r6
 8002468:	6800      	ldr	r0, [r0, #0]
 800246a:	f7ff ffdd 	bl	8002428 <_swiread>
 800246e:	1c43      	adds	r3, r0, #1
 8002470:	bf1f      	itttt	ne
 8002472:	6863      	ldrne	r3, [r4, #4]
 8002474:	1a28      	subne	r0, r5, r0
 8002476:	181b      	addne	r3, r3, r0
 8002478:	6063      	strne	r3, [r4, #4]
 800247a:	e7f2      	b.n	8002462 <_read+0x1a>

0800247c <_swilseek>:
 800247c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800247e:	460c      	mov	r4, r1
 8002480:	4616      	mov	r6, r2
 8002482:	f7ff ff99 	bl	80023b8 <findslot>
 8002486:	4605      	mov	r5, r0
 8002488:	b940      	cbnz	r0, 800249c <_swilseek+0x20>
 800248a:	f000 fa61 	bl	8002950 <__errno>
 800248e:	2309      	movs	r3, #9
 8002490:	6003      	str	r3, [r0, #0]
 8002492:	f04f 34ff 	mov.w	r4, #4294967295
 8002496:	4620      	mov	r0, r4
 8002498:	b003      	add	sp, #12
 800249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800249c:	2e02      	cmp	r6, #2
 800249e:	d903      	bls.n	80024a8 <_swilseek+0x2c>
 80024a0:	f000 fa56 	bl	8002950 <__errno>
 80024a4:	2316      	movs	r3, #22
 80024a6:	e7f3      	b.n	8002490 <_swilseek+0x14>
 80024a8:	2e01      	cmp	r6, #1
 80024aa:	d112      	bne.n	80024d2 <_swilseek+0x56>
 80024ac:	6843      	ldr	r3, [r0, #4]
 80024ae:	18e4      	adds	r4, r4, r3
 80024b0:	d4f6      	bmi.n	80024a0 <_swilseek+0x24>
 80024b2:	682b      	ldr	r3, [r5, #0]
 80024b4:	260a      	movs	r6, #10
 80024b6:	e9cd 3400 	strd	r3, r4, [sp]
 80024ba:	466f      	mov	r7, sp
 80024bc:	4630      	mov	r0, r6
 80024be:	4639      	mov	r1, r7
 80024c0:	beab      	bkpt	0x00ab
 80024c2:	4606      	mov	r6, r0
 80024c4:	4630      	mov	r0, r6
 80024c6:	f7ff ff91 	bl	80023ec <checkerror>
 80024ca:	2800      	cmp	r0, #0
 80024cc:	dbe1      	blt.n	8002492 <_swilseek+0x16>
 80024ce:	606c      	str	r4, [r5, #4]
 80024d0:	e7e1      	b.n	8002496 <_swilseek+0x1a>
 80024d2:	2e02      	cmp	r6, #2
 80024d4:	d1ed      	bne.n	80024b2 <_swilseek+0x36>
 80024d6:	af02      	add	r7, sp, #8
 80024d8:	6803      	ldr	r3, [r0, #0]
 80024da:	f847 3d08 	str.w	r3, [r7, #-8]!
 80024de:	260c      	movs	r6, #12
 80024e0:	4630      	mov	r0, r6
 80024e2:	4639      	mov	r1, r7
 80024e4:	beab      	bkpt	0x00ab
 80024e6:	4606      	mov	r6, r0
 80024e8:	4630      	mov	r0, r6
 80024ea:	f7ff ff7f 	bl	80023ec <checkerror>
 80024ee:	1c43      	adds	r3, r0, #1
 80024f0:	d0cf      	beq.n	8002492 <_swilseek+0x16>
 80024f2:	4404      	add	r4, r0
 80024f4:	e7dd      	b.n	80024b2 <_swilseek+0x36>

080024f6 <_lseek>:
 80024f6:	f7ff bfc1 	b.w	800247c <_swilseek>

080024fa <_swiwrite>:
 80024fa:	b530      	push	{r4, r5, lr}
 80024fc:	b085      	sub	sp, #20
 80024fe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002502:	9203      	str	r2, [sp, #12]
 8002504:	2405      	movs	r4, #5
 8002506:	ad01      	add	r5, sp, #4
 8002508:	4620      	mov	r0, r4
 800250a:	4629      	mov	r1, r5
 800250c:	beab      	bkpt	0x00ab
 800250e:	4604      	mov	r4, r0
 8002510:	4620      	mov	r0, r4
 8002512:	f7ff ff6b 	bl	80023ec <checkerror>
 8002516:	b005      	add	sp, #20
 8002518:	bd30      	pop	{r4, r5, pc}

0800251a <_write>:
 800251a:	b570      	push	{r4, r5, r6, lr}
 800251c:	460e      	mov	r6, r1
 800251e:	4615      	mov	r5, r2
 8002520:	f7ff ff4a 	bl	80023b8 <findslot>
 8002524:	4604      	mov	r4, r0
 8002526:	b930      	cbnz	r0, 8002536 <_write+0x1c>
 8002528:	f000 fa12 	bl	8002950 <__errno>
 800252c:	2309      	movs	r3, #9
 800252e:	6003      	str	r3, [r0, #0]
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	bd70      	pop	{r4, r5, r6, pc}
 8002536:	462a      	mov	r2, r5
 8002538:	4631      	mov	r1, r6
 800253a:	6800      	ldr	r0, [r0, #0]
 800253c:	f7ff ffdd 	bl	80024fa <_swiwrite>
 8002540:	1e02      	subs	r2, r0, #0
 8002542:	dbf5      	blt.n	8002530 <_write+0x16>
 8002544:	6863      	ldr	r3, [r4, #4]
 8002546:	1aa8      	subs	r0, r5, r2
 8002548:	4403      	add	r3, r0
 800254a:	42aa      	cmp	r2, r5
 800254c:	6063      	str	r3, [r4, #4]
 800254e:	d1f1      	bne.n	8002534 <_write+0x1a>
 8002550:	2000      	movs	r0, #0
 8002552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002556:	f7ff bf59 	b.w	800240c <error>

0800255a <_swiclose>:
 800255a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800255c:	ad02      	add	r5, sp, #8
 800255e:	2402      	movs	r4, #2
 8002560:	f845 0d04 	str.w	r0, [r5, #-4]!
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	beab      	bkpt	0x00ab
 800256a:	4604      	mov	r4, r0
 800256c:	4620      	mov	r0, r4
 800256e:	f7ff ff3d 	bl	80023ec <checkerror>
 8002572:	b003      	add	sp, #12
 8002574:	bd30      	pop	{r4, r5, pc}
	...

08002578 <_close>:
 8002578:	b538      	push	{r3, r4, r5, lr}
 800257a:	4605      	mov	r5, r0
 800257c:	f7ff ff1c 	bl	80023b8 <findslot>
 8002580:	4604      	mov	r4, r0
 8002582:	b930      	cbnz	r0, 8002592 <_close+0x1a>
 8002584:	f000 f9e4 	bl	8002950 <__errno>
 8002588:	2309      	movs	r3, #9
 800258a:	6003      	str	r3, [r0, #0]
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	bd38      	pop	{r3, r4, r5, pc}
 8002592:	3d01      	subs	r5, #1
 8002594:	2d01      	cmp	r5, #1
 8002596:	d809      	bhi.n	80025ac <_close+0x34>
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <_close+0x48>)
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d104      	bne.n	80025ac <_close+0x34>
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	6003      	str	r3, [r0, #0]
 80025a8:	2000      	movs	r0, #0
 80025aa:	e7f1      	b.n	8002590 <_close+0x18>
 80025ac:	6820      	ldr	r0, [r4, #0]
 80025ae:	f7ff ffd4 	bl	800255a <_swiclose>
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d1ec      	bne.n	8002590 <_close+0x18>
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ba:	6023      	str	r3, [r4, #0]
 80025bc:	e7e8      	b.n	8002590 <_close+0x18>
 80025be:	bf00      	nop
 80025c0:	200000cc 	.word	0x200000cc

080025c4 <_sbrk>:
 80025c4:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <_sbrk+0x38>)
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	b510      	push	{r4, lr}
 80025ca:	4602      	mov	r2, r0
 80025cc:	b909      	cbnz	r1, 80025d2 <_sbrk+0xe>
 80025ce:	490c      	ldr	r1, [pc, #48]	; (8002600 <_sbrk+0x3c>)
 80025d0:	6019      	str	r1, [r3, #0]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	4669      	mov	r1, sp
 80025d6:	4402      	add	r2, r0
 80025d8:	428a      	cmp	r2, r1
 80025da:	d806      	bhi.n	80025ea <_sbrk+0x26>
 80025dc:	4909      	ldr	r1, [pc, #36]	; (8002604 <_sbrk+0x40>)
 80025de:	4c0a      	ldr	r4, [pc, #40]	; (8002608 <_sbrk+0x44>)
 80025e0:	6809      	ldr	r1, [r1, #0]
 80025e2:	42a1      	cmp	r1, r4
 80025e4:	d008      	beq.n	80025f8 <_sbrk+0x34>
 80025e6:	428a      	cmp	r2, r1
 80025e8:	d906      	bls.n	80025f8 <_sbrk+0x34>
 80025ea:	f000 f9b1 	bl	8002950 <__errno>
 80025ee:	230c      	movs	r3, #12
 80025f0:	6003      	str	r3, [r0, #0]
 80025f2:	f04f 30ff 	mov.w	r0, #4294967295
 80025f6:	bd10      	pop	{r4, pc}
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	e7fc      	b.n	80025f6 <_sbrk+0x32>
 80025fc:	200000bc 	.word	0x200000bc
 8002600:	20000598 	.word	0x20000598
 8002604:	20000088 	.word	0x20000088
 8002608:	cafedead 	.word	0xcafedead

0800260c <_swistat>:
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	460c      	mov	r4, r1
 8002610:	f7ff fed2 	bl	80023b8 <findslot>
 8002614:	4606      	mov	r6, r0
 8002616:	b930      	cbnz	r0, 8002626 <_swistat+0x1a>
 8002618:	f000 f99a 	bl	8002950 <__errno>
 800261c:	2309      	movs	r3, #9
 800261e:	6003      	str	r3, [r0, #0]
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	bd70      	pop	{r4, r5, r6, pc}
 8002626:	6863      	ldr	r3, [r4, #4]
 8002628:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800262c:	6063      	str	r3, [r4, #4]
 800262e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002632:	6463      	str	r3, [r4, #68]	; 0x44
 8002634:	250c      	movs	r5, #12
 8002636:	4628      	mov	r0, r5
 8002638:	4631      	mov	r1, r6
 800263a:	beab      	bkpt	0x00ab
 800263c:	4605      	mov	r5, r0
 800263e:	4628      	mov	r0, r5
 8002640:	f7ff fed4 	bl	80023ec <checkerror>
 8002644:	1c43      	adds	r3, r0, #1
 8002646:	bf1c      	itt	ne
 8002648:	6120      	strne	r0, [r4, #16]
 800264a:	2000      	movne	r0, #0
 800264c:	e7ea      	b.n	8002624 <_swistat+0x18>

0800264e <_fstat>:
 800264e:	460b      	mov	r3, r1
 8002650:	b510      	push	{r4, lr}
 8002652:	2100      	movs	r1, #0
 8002654:	4604      	mov	r4, r0
 8002656:	2258      	movs	r2, #88	; 0x58
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe ff5f 	bl	800151c <memset>
 800265e:	4601      	mov	r1, r0
 8002660:	4620      	mov	r0, r4
 8002662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002666:	f7ff bfd1 	b.w	800260c <_swistat>

0800266a <_stat>:
 800266a:	b538      	push	{r3, r4, r5, lr}
 800266c:	460d      	mov	r5, r1
 800266e:	4604      	mov	r4, r0
 8002670:	2258      	movs	r2, #88	; 0x58
 8002672:	2100      	movs	r1, #0
 8002674:	4628      	mov	r0, r5
 8002676:	f7fe ff51 	bl	800151c <memset>
 800267a:	4620      	mov	r0, r4
 800267c:	2100      	movs	r1, #0
 800267e:	f000 f811 	bl	80026a4 <_swiopen>
 8002682:	1c43      	adds	r3, r0, #1
 8002684:	4604      	mov	r4, r0
 8002686:	d00b      	beq.n	80026a0 <_stat+0x36>
 8002688:	686b      	ldr	r3, [r5, #4]
 800268a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800268e:	606b      	str	r3, [r5, #4]
 8002690:	4629      	mov	r1, r5
 8002692:	f7ff ffbb 	bl	800260c <_swistat>
 8002696:	4605      	mov	r5, r0
 8002698:	4620      	mov	r0, r4
 800269a:	f7ff ff6d 	bl	8002578 <_close>
 800269e:	462c      	mov	r4, r5
 80026a0:	4620      	mov	r0, r4
 80026a2:	bd38      	pop	{r3, r4, r5, pc}

080026a4 <_swiopen>:
 80026a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a8:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <_swiopen+0xb4>)
 80026aa:	b096      	sub	sp, #88	; 0x58
 80026ac:	4682      	mov	sl, r0
 80026ae:	460e      	mov	r6, r1
 80026b0:	2500      	movs	r5, #0
 80026b2:	4698      	mov	r8, r3
 80026b4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80026b8:	1c61      	adds	r1, r4, #1
 80026ba:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 80026be:	d036      	beq.n	800272e <_swiopen+0x8a>
 80026c0:	3501      	adds	r5, #1
 80026c2:	2d14      	cmp	r5, #20
 80026c4:	d1f6      	bne.n	80026b4 <_swiopen+0x10>
 80026c6:	f000 f943 	bl	8002950 <__errno>
 80026ca:	2318      	movs	r3, #24
 80026cc:	6003      	str	r3, [r0, #0]
 80026ce:	f04f 34ff 	mov.w	r4, #4294967295
 80026d2:	e03c      	b.n	800274e <_swiopen+0xaa>
 80026d4:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80026d8:	f240 6301 	movw	r3, #1537	; 0x601
 80026dc:	07b2      	lsls	r2, r6, #30
 80026de:	bf48      	it	mi
 80026e0:	f044 0402 	orrmi.w	r4, r4, #2
 80026e4:	421e      	tst	r6, r3
 80026e6:	bf18      	it	ne
 80026e8:	f044 0404 	orrne.w	r4, r4, #4
 80026ec:	0733      	lsls	r3, r6, #28
 80026ee:	bf48      	it	mi
 80026f0:	f024 0404 	bicmi.w	r4, r4, #4
 80026f4:	4650      	mov	r0, sl
 80026f6:	bf48      	it	mi
 80026f8:	f044 0408 	orrmi.w	r4, r4, #8
 80026fc:	f8cd a000 	str.w	sl, [sp]
 8002700:	f7fd fd86 	bl	8000210 <strlen>
 8002704:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002708:	2401      	movs	r4, #1
 800270a:	4620      	mov	r0, r4
 800270c:	4649      	mov	r1, r9
 800270e:	beab      	bkpt	0x00ab
 8002710:	4604      	mov	r4, r0
 8002712:	2c00      	cmp	r4, #0
 8002714:	db06      	blt.n	8002724 <_swiopen+0x80>
 8002716:	4447      	add	r7, r8
 8002718:	2300      	movs	r3, #0
 800271a:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	462c      	mov	r4, r5
 8002722:	e014      	b.n	800274e <_swiopen+0xaa>
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff fe71 	bl	800240c <error>
 800272a:	4604      	mov	r4, r0
 800272c:	e00f      	b.n	800274e <_swiopen+0xaa>
 800272e:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002732:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002736:	46e9      	mov	r9, sp
 8002738:	d1cc      	bne.n	80026d4 <_swiopen+0x30>
 800273a:	4649      	mov	r1, r9
 800273c:	4650      	mov	r0, sl
 800273e:	f7ff ff94 	bl	800266a <_stat>
 8002742:	3001      	adds	r0, #1
 8002744:	d0c6      	beq.n	80026d4 <_swiopen+0x30>
 8002746:	f000 f903 	bl	8002950 <__errno>
 800274a:	2311      	movs	r3, #17
 800274c:	6003      	str	r3, [r0, #0]
 800274e:	4620      	mov	r0, r4
 8002750:	b016      	add	sp, #88	; 0x58
 8002752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002756:	bf00      	nop
 8002758:	200000cc 	.word	0x200000cc

0800275c <_get_semihosting_exts>:
 800275c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002760:	4607      	mov	r7, r0
 8002762:	4688      	mov	r8, r1
 8002764:	4829      	ldr	r0, [pc, #164]	; (800280c <_get_semihosting_exts+0xb0>)
 8002766:	2100      	movs	r1, #0
 8002768:	4615      	mov	r5, r2
 800276a:	f7ff ff9b 	bl	80026a4 <_swiopen>
 800276e:	462a      	mov	r2, r5
 8002770:	4604      	mov	r4, r0
 8002772:	2100      	movs	r1, #0
 8002774:	4638      	mov	r0, r7
 8002776:	f7fe fed1 	bl	800151c <memset>
 800277a:	1c63      	adds	r3, r4, #1
 800277c:	d015      	beq.n	80027aa <_get_semihosting_exts+0x4e>
 800277e:	4620      	mov	r0, r4
 8002780:	f7ff fe1a 	bl	80023b8 <findslot>
 8002784:	260c      	movs	r6, #12
 8002786:	4681      	mov	r9, r0
 8002788:	4630      	mov	r0, r6
 800278a:	4649      	mov	r1, r9
 800278c:	beab      	bkpt	0x00ab
 800278e:	4606      	mov	r6, r0
 8002790:	4630      	mov	r0, r6
 8002792:	f7ff fe2b 	bl	80023ec <checkerror>
 8002796:	2803      	cmp	r0, #3
 8002798:	dd02      	ble.n	80027a0 <_get_semihosting_exts+0x44>
 800279a:	3803      	subs	r0, #3
 800279c:	42a8      	cmp	r0, r5
 800279e:	dc08      	bgt.n	80027b2 <_get_semihosting_exts+0x56>
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fee9 	bl	8002578 <_close>
 80027a6:	f04f 34ff 	mov.w	r4, #4294967295
 80027aa:	4620      	mov	r0, r4
 80027ac:	b003      	add	sp, #12
 80027ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027b2:	2204      	movs	r2, #4
 80027b4:	eb0d 0102 	add.w	r1, sp, r2
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7ff fe45 	bl	8002448 <_read>
 80027be:	2803      	cmp	r0, #3
 80027c0:	ddee      	ble.n	80027a0 <_get_semihosting_exts+0x44>
 80027c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027c6:	2b53      	cmp	r3, #83	; 0x53
 80027c8:	d1ea      	bne.n	80027a0 <_get_semihosting_exts+0x44>
 80027ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80027ce:	2b48      	cmp	r3, #72	; 0x48
 80027d0:	d1e6      	bne.n	80027a0 <_get_semihosting_exts+0x44>
 80027d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80027d6:	2b46      	cmp	r3, #70	; 0x46
 80027d8:	d1e2      	bne.n	80027a0 <_get_semihosting_exts+0x44>
 80027da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027de:	2b42      	cmp	r3, #66	; 0x42
 80027e0:	d1de      	bne.n	80027a0 <_get_semihosting_exts+0x44>
 80027e2:	2201      	movs	r2, #1
 80027e4:	4641      	mov	r1, r8
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7ff fe48 	bl	800247c <_swilseek>
 80027ec:	2800      	cmp	r0, #0
 80027ee:	dbd7      	blt.n	80027a0 <_get_semihosting_exts+0x44>
 80027f0:	462a      	mov	r2, r5
 80027f2:	4639      	mov	r1, r7
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff fe27 	bl	8002448 <_read>
 80027fa:	4605      	mov	r5, r0
 80027fc:	4620      	mov	r0, r4
 80027fe:	f7ff febb 	bl	8002578 <_close>
 8002802:	4628      	mov	r0, r5
 8002804:	f7ff fdf2 	bl	80023ec <checkerror>
 8002808:	4604      	mov	r4, r0
 800280a:	e7ce      	b.n	80027aa <_get_semihosting_exts+0x4e>
 800280c:	08002a8b 	.word	0x08002a8b

08002810 <initialise_semihosting_exts>:
 8002810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002812:	4d0a      	ldr	r5, [pc, #40]	; (800283c <initialise_semihosting_exts+0x2c>)
 8002814:	4c0a      	ldr	r4, [pc, #40]	; (8002840 <initialise_semihosting_exts+0x30>)
 8002816:	2100      	movs	r1, #0
 8002818:	2201      	movs	r2, #1
 800281a:	a801      	add	r0, sp, #4
 800281c:	6029      	str	r1, [r5, #0]
 800281e:	6022      	str	r2, [r4, #0]
 8002820:	f7ff ff9c 	bl	800275c <_get_semihosting_exts>
 8002824:	2800      	cmp	r0, #0
 8002826:	dd07      	ble.n	8002838 <initialise_semihosting_exts+0x28>
 8002828:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800282c:	f003 0201 	and.w	r2, r3, #1
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	602a      	str	r2, [r5, #0]
 8002836:	6023      	str	r3, [r4, #0]
 8002838:	b003      	add	sp, #12
 800283a:	bd30      	pop	{r4, r5, pc}
 800283c:	2000008c 	.word	0x2000008c
 8002840:	20000090 	.word	0x20000090

08002844 <_has_ext_stdout_stderr>:
 8002844:	b510      	push	{r4, lr}
 8002846:	4c04      	ldr	r4, [pc, #16]	; (8002858 <_has_ext_stdout_stderr+0x14>)
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	2a00      	cmp	r2, #0
 800284c:	da01      	bge.n	8002852 <_has_ext_stdout_stderr+0xe>
 800284e:	f7ff ffdf 	bl	8002810 <initialise_semihosting_exts>
 8002852:	6820      	ldr	r0, [r4, #0]
 8002854:	bd10      	pop	{r4, pc}
 8002856:	bf00      	nop
 8002858:	20000090 	.word	0x20000090

0800285c <initialise_monitor_handles>:
 800285c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002860:	b085      	sub	sp, #20
 8002862:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002914 <initialise_monitor_handles+0xb8>
 8002866:	f8cd 9004 	str.w	r9, [sp, #4]
 800286a:	2303      	movs	r3, #3
 800286c:	2400      	movs	r4, #0
 800286e:	9303      	str	r3, [sp, #12]
 8002870:	f10d 0804 	add.w	r8, sp, #4
 8002874:	9402      	str	r4, [sp, #8]
 8002876:	2501      	movs	r5, #1
 8002878:	4628      	mov	r0, r5
 800287a:	4641      	mov	r1, r8
 800287c:	beab      	bkpt	0x00ab
 800287e:	4605      	mov	r5, r0
 8002880:	4e20      	ldr	r6, [pc, #128]	; (8002904 <initialise_monitor_handles+0xa8>)
 8002882:	4a21      	ldr	r2, [pc, #132]	; (8002908 <initialise_monitor_handles+0xac>)
 8002884:	6035      	str	r5, [r6, #0]
 8002886:	4623      	mov	r3, r4
 8002888:	f04f 31ff 	mov.w	r1, #4294967295
 800288c:	4614      	mov	r4, r2
 800288e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8002892:	3301      	adds	r3, #1
 8002894:	2b14      	cmp	r3, #20
 8002896:	d1fa      	bne.n	800288e <initialise_monitor_handles+0x32>
 8002898:	f7ff ffd4 	bl	8002844 <_has_ext_stdout_stderr>
 800289c:	4d1b      	ldr	r5, [pc, #108]	; (800290c <initialise_monitor_handles+0xb0>)
 800289e:	b1d0      	cbz	r0, 80028d6 <initialise_monitor_handles+0x7a>
 80028a0:	f04f 0a03 	mov.w	sl, #3
 80028a4:	2304      	movs	r3, #4
 80028a6:	f8cd 9004 	str.w	r9, [sp, #4]
 80028aa:	2701      	movs	r7, #1
 80028ac:	f8cd a00c 	str.w	sl, [sp, #12]
 80028b0:	9302      	str	r3, [sp, #8]
 80028b2:	4638      	mov	r0, r7
 80028b4:	4641      	mov	r1, r8
 80028b6:	beab      	bkpt	0x00ab
 80028b8:	4683      	mov	fp, r0
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <initialise_monitor_handles+0xb4>)
 80028bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80028c0:	f8c3 b000 	str.w	fp, [r3]
 80028c4:	2308      	movs	r3, #8
 80028c6:	f8cd a00c 	str.w	sl, [sp, #12]
 80028ca:	9302      	str	r3, [sp, #8]
 80028cc:	4638      	mov	r0, r7
 80028ce:	4641      	mov	r1, r8
 80028d0:	beab      	bkpt	0x00ab
 80028d2:	4607      	mov	r7, r0
 80028d4:	602f      	str	r7, [r5, #0]
 80028d6:	682b      	ldr	r3, [r5, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	bf02      	ittt	eq
 80028dc:	4b0c      	ldreq	r3, [pc, #48]	; (8002910 <initialise_monitor_handles+0xb4>)
 80028de:	681b      	ldreq	r3, [r3, #0]
 80028e0:	602b      	streq	r3, [r5, #0]
 80028e2:	6833      	ldr	r3, [r6, #0]
 80028e4:	6023      	str	r3, [r4, #0]
 80028e6:	2600      	movs	r6, #0
 80028e8:	6066      	str	r6, [r4, #4]
 80028ea:	f7ff ffab 	bl	8002844 <_has_ext_stdout_stderr>
 80028ee:	b130      	cbz	r0, 80028fe <initialise_monitor_handles+0xa2>
 80028f0:	4b07      	ldr	r3, [pc, #28]	; (8002910 <initialise_monitor_handles+0xb4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80028f8:	682b      	ldr	r3, [r5, #0]
 80028fa:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80028fe:	b005      	add	sp, #20
 8002900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002904:	200000c4 	.word	0x200000c4
 8002908:	200000cc 	.word	0x200000cc
 800290c:	200000c0 	.word	0x200000c0
 8002910:	200000c8 	.word	0x200000c8
 8002914:	08002aa1 	.word	0x08002aa1

08002918 <_isatty>:
 8002918:	b570      	push	{r4, r5, r6, lr}
 800291a:	f7ff fd4d 	bl	80023b8 <findslot>
 800291e:	2509      	movs	r5, #9
 8002920:	4604      	mov	r4, r0
 8002922:	b920      	cbnz	r0, 800292e <_isatty+0x16>
 8002924:	f000 f814 	bl	8002950 <__errno>
 8002928:	6005      	str	r5, [r0, #0]
 800292a:	4620      	mov	r0, r4
 800292c:	bd70      	pop	{r4, r5, r6, pc}
 800292e:	4628      	mov	r0, r5
 8002930:	4621      	mov	r1, r4
 8002932:	beab      	bkpt	0x00ab
 8002934:	4604      	mov	r4, r0
 8002936:	2c01      	cmp	r4, #1
 8002938:	d0f7      	beq.n	800292a <_isatty+0x12>
 800293a:	f000 f809 	bl	8002950 <__errno>
 800293e:	2400      	movs	r4, #0
 8002940:	4606      	mov	r6, r0
 8002942:	2513      	movs	r5, #19
 8002944:	4628      	mov	r0, r5
 8002946:	4621      	mov	r1, r4
 8002948:	beab      	bkpt	0x00ab
 800294a:	4605      	mov	r5, r0
 800294c:	6035      	str	r5, [r6, #0]
 800294e:	e7ec      	b.n	800292a <_isatty+0x12>

08002950 <__errno>:
 8002950:	4b01      	ldr	r3, [pc, #4]	; (8002958 <__errno+0x8>)
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000024 	.word	0x20000024

0800295c <_init>:
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295e:	bf00      	nop
 8002960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002962:	bc08      	pop	{r3}
 8002964:	469e      	mov	lr, r3
 8002966:	4770      	bx	lr

08002968 <_fini>:
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296a:	bf00      	nop
 800296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296e:	bc08      	pop	{r3}
 8002970:	469e      	mov	lr, r3
 8002972:	4770      	bx	lr
